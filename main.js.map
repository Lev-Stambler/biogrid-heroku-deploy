{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"tslib\"","webpack:///./apps/api/src/app/config/constants.ts","webpack:///./apps/api/src/app/config/Logger.ts","webpack:///external \"tsoa\"","webpack:///./apps/api/src/app/controllers/BiogridController.ts","webpack:///./apps/api/src/main.ts","webpack:///./apps/api/src/app/config/Server.ts","webpack:///external \"express\"","webpack:///external \"swagger-ui-express\"","webpack:///external \"body-parser\"","webpack:///external \"morgan\"","webpack:///./apps/api/src/environments/environment.prod.ts","webpack:///./apps/api/src/app/config/ErrorHandler.ts","webpack:///external \"winston\"","webpack:///./apps/api/src/app/build/routes.ts","webpack:///./apps/api/src/app/services/index.ts","webpack:///./apps/api/src/app/services/Biogrid.ts","webpack:///./apps/api/src/app/controllers/index.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = require(\"tslib\");","import { environment } from '../../environments/environment';\n\nexport default {\n  environment: environment.production ? 'production' : 'development',\n  port: environment.port || parseInt(process.env.PORT || '3000'),\n  errorTypes: {\n    db: {\n      statusCode: 500,\n      name: 'Internal Server Error',\n      message: 'database error',\n    },\n    validation: {\n      statusCode: 400,\n      name: 'Bad Request',\n      message: 'validation error',\n    },\n    auth: { statusCode: 401, name: 'Unauthorized', message: 'auth error' },\n    forbidden: {\n      statusCode: 403,\n      name: 'Forbidden',\n      message: 'forbidden content',\n    },\n    notFound: {\n      statusCode: 404,\n      name: 'Not Found',\n      message: 'content not found',\n    },\n    entity: {\n      statusCode: 422,\n      name: 'Unprocessable Entity',\n      message: 'entity error',\n    },\n  },\n  get errorMap() {\n    return {\n      ValidateError: this.errorTypes.validation,\n      ValidationError: this.errorTypes.validation,\n      CastError: this.errorTypes.db,\n    };\n  },\n};\n","import constants from './constants';\nimport * as logger from 'winston';\n\nconst date = new Date();\nconst fileName = `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}.log`;\nlogger.configure({\n  level: 'debug',\n  format: logger.format.combine(\n    logger.format.colorize(),\n    logger.format.simple()),\n  transports: [\n    new logger.transports.File({ filename: `logs/${fileName}`, level: 'debug' }),\n    new logger.transports.Console()\n  ]\n});\n\nexport class Logger {\n  public static readonly shouldLog: boolean = constants.environment !== 'test';\n  public static readonly console = logger;\n\n  public static log(...args: unknown[]): void {\n    if (Logger.shouldLog) Logger.console.debug(Logger.formatArgs(args));\n  }\n\n  public static warn(...args: unknown[]): void {\n    if (Logger.shouldLog) Logger.console.warn(Logger.formatArgs(args));\n  }\n\n  public static error(...args: unknown[]): void {\n    if (Logger.shouldLog) Logger.console.error(Logger.formatArgs(args));\n  }\n\n  public static info(...args: unknown[]): void {\n    if (Logger.shouldLog) Logger.console.info(Logger.formatArgs(args));\n  }\n\n  public static verbose(...args: unknown[]): void {\n    if (Logger.shouldLog) Logger.console.verbose(Logger.formatArgs(args));\n  }\n\n  private static formatArgs(args: unknown[]): string {\n    return JSON.stringify(args, null, 4);\n  }\n\n}\n","module.exports = require(\"tsoa\");","import { Route, Controller, Get, Post, Body, SuccessResponse } from 'tsoa';\n\nimport {\n  createNewBiogrid,\n  runBiogridSimulation,\n  getSimulationResults,\n  BiogridSimulationResults,\n  NewBiogridOpts,\n} from '../services';\n\n@Route('biogrid')\nexport class BiogridController extends Controller {\n  constructor() {\n    super();\n  }\n\n  @SuccessResponse(204)\n  @Post('/')\n  public async NewBiogrid(@Body() body: NewBiogridOpts): Promise<void> {\n    await createNewBiogrid(body);\n  }\n\n  @SuccessResponse(204)\n  @Post('/run')\n  public async RunBiogridSimulation(): Promise<void> {\n    await runBiogridSimulation();\n  }\n\n  @SuccessResponse(200)\n  @Get('/simulation-results')\n  public async GetBiogridSimulationResults(): Promise<\n    BiogridSimulationResults\n  > {\n    return await getSimulationResults();\n  }\n}\n","import { Server } from './app/config/Server';\n\nconst server: Server = new Server();\n\nserver.listen();\n","import express from 'express';\nimport * as swaggerUi from 'swagger-ui-express';\nimport * as bodyParser from 'body-parser';\nimport morgan from 'morgan';\n\nimport constants from './constants';\nimport { ErrorHandler } from './ErrorHandler';\nimport { RegisterRoutes } from '../build/routes';\nimport { Logger } from './Logger';\nimport '../controllers';\n\nexport class Server {\n  public app: express.Express = express();\n  private readonly port: number = constants.port;\n\n  constructor() {\n    this.app.use(this.allowCors);\n    this.app.use(bodyParser.urlencoded({ extended: true }));\n    this.app.use(bodyParser.json());\n    this.app.use(morgan('dev', { skip: () => !Logger.shouldLog }));\n    RegisterRoutes(this.app);\n    this.app.use(ErrorHandler.handleError);\n    this.serveStaticFiles();\n\n    // Disable linter as require statement is necessary for swagger files\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const swaggerDocument = require('../build/swagger.json');\n\n    this.app.use(\n      '/api-docs',\n      swaggerUi.serve,\n      swaggerUi.setup(swaggerDocument)\n    );\n  }\n\n  public async listen(port: number = this.port) {\n    process.on('uncaughtException', this.criticalErrorHandler);\n    process.on('unhandledRejection', this.criticalErrorHandler);\n    const listen = this.app.listen(this.port);\n    Logger.info(\n      `${constants.environment} server running on port: ${this.port}`\n    );\n    return listen;\n  }\n\n  /**\n   * Serve the built, static frontend files for production\n   */\n  private serveStaticFiles() {\n    const staticDir = __dirname + '/build/public';\n    this.app.use(express.static(staticDir));\n  }\n\n  private criticalErrorHandler(...args: unknown[]) {\n    Logger.error('Critical Error...', ...args);\n    process.exit(1);\n  }\n\n  private allowCors(\n    req: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ): void {\n    // TODO: in a later PR only specific sites will have access. For now, as we get setup, any site can have API access\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header(\n      'Access-Control-Allow-Headers',\n      'Origin, X-Requested-With, Content-Type, Accept, Authorization, apikey, x-access-token'\n    );\n    next();\n  }\n}\n","module.exports = require(\"express\");","module.exports = require(\"swagger-ui-express\");","module.exports = require(\"body-parser\");","module.exports = require(\"morgan\");","export const environment = {\n  production: true,\n  // Leave port null so that the Heroku env variable can override it\n  port: null\n};\n","import { Request, Response, NextFunction } from 'express';\n\nimport constants from './constants';\nimport { Logger } from './Logger';\n\nexport interface ErrorType {\n  statusCode: number;\n  name: string;\n  message: string;\n  fields?: { [field: string]: { message: string } };\n}\n\nexport class ApiError extends Error implements ErrorType {\n  public statusCode = 500;\n  public fields?: { [field: string]: { message: string } };\n\n  constructor(errorType: ErrorType) {\n    super(errorType.message);\n    this.name = errorType.name;\n    if (errorType.statusCode) {\n      this.statusCode = errorType.statusCode;\n    }\n    this.fields = errorType.fields;\n  }\n}\n\nexport class ErrorHandler {\n  public static handleError(\n    error: ApiError,\n    req: Request,\n    res: Response,\n    next: NextFunction\n  ): void {\n    const { name, message, fields, statusCode } = error;\n    Logger.error(\n      `Error: ${statusCode}`,\n      `Error Name: ${name}`,\n      `Error Message: ${message}`,\n      'Error Fields:',\n      fields || {},\n      'Original Error: ',\n      error\n    );\n    res.status(statusCode).json({ name, message, fields });\n    next();\n  }\n}\n","module.exports = require(\"winston\");","/* tslint:disable */\r\n/* eslint-disable */\r\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\nimport { Controller, ValidationService, FieldErrors, ValidateError, TsoaRoute } from 'tsoa';\r\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\nimport { BiogridController } from './../controllers/BiogridController';\r\nimport * as express from 'express';\r\n\r\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\nconst models: TsoaRoute.Models = {\r\n  \"NewBiogridOpts\": {\r\n    \"dataType\": \"refObject\",\r\n    \"properties\": {\r\n      \"startDate\": { \"dataType\": \"datetime\", \"required\": true },\r\n      \"endDate\": { \"dataType\": \"datetime\", \"required\": true },\r\n      \"smallBatteryCells\": { \"dataType\": \"double\", \"required\": true },\r\n      \"largeBatteryCells\": { \"dataType\": \"double\", \"required\": true },\r\n    },\r\n    \"additionalProperties\": true,\r\n  },\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n  \"BiogridSimulationResults\": {\r\n    \"dataType\": \"refObject\",\r\n    \"properties\": {\r\n      \"energyWastedFromSource\": { \"dataType\": \"double\", \"required\": true },\r\n      \"energyWastedInTransportation\": { \"dataType\": \"double\", \"required\": true },\r\n      \"timeWithoutEnoughEnergy\": { \"dataType\": \"double\", \"required\": true },\r\n    },\r\n    \"additionalProperties\": true,\r\n  },\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n};\r\nconst validationService = new ValidationService(models);\r\n\r\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\nexport function RegisterRoutes(app: express.Express) {\r\n  // ###########################################################################################################\r\n  //  NOTE: If you do not see routes for all of your controllers in this file, then you might not have informed tsoa of where to look\r\n  //      Please look into the \"controllerPathGlobs\" config option described in the readme: https://github.com/lukeautry/tsoa\r\n  // ###########################################################################################################\r\n  app.post('/api/biogrid',\r\n    function(request: any, response: any, next: any) {\r\n      const args = {\r\n        body: { \"in\": \"body\", \"name\": \"body\", \"required\": true, \"ref\": \"NewBiogridOpts\" },\r\n      };\r\n\r\n      // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n      let validatedArgs: any[] = [];\r\n      try {\r\n        validatedArgs = getValidatedArgs(args, request);\r\n      } catch (err) {\r\n        return next(err);\r\n      }\r\n\r\n      const controller = new BiogridController();\r\n\r\n\r\n      const promise = controller.NewBiogrid.apply(controller, validatedArgs as any);\r\n      promiseHandler(controller, promise, response, next);\r\n    });\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n  app.post('/api/biogrid/run',\r\n    function(request: any, response: any, next: any) {\r\n      const args = {\r\n      };\r\n\r\n      // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n      let validatedArgs: any[] = [];\r\n      try {\r\n        validatedArgs = getValidatedArgs(args, request);\r\n      } catch (err) {\r\n        return next(err);\r\n      }\r\n\r\n      const controller = new BiogridController();\r\n\r\n\r\n      const promise = controller.RunBiogridSimulation.apply(controller, validatedArgs as any);\r\n      promiseHandler(controller, promise, response, next);\r\n    });\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n  app.get('/api/biogrid/simulation-results',\r\n    function(request: any, response: any, next: any) {\r\n      const args = {\r\n      };\r\n\r\n      // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n      let validatedArgs: any[] = [];\r\n      try {\r\n        validatedArgs = getValidatedArgs(args, request);\r\n      } catch (err) {\r\n        return next(err);\r\n      }\r\n\r\n      const controller = new BiogridController();\r\n\r\n\r\n      const promise = controller.GetBiogridSimulationResults.apply(controller, validatedArgs as any);\r\n      promiseHandler(controller, promise, response, next);\r\n    });\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n  function isController(object: any): object is Controller {\r\n    return 'getHeaders' in object && 'getStatus' in object && 'setStatus' in object;\r\n  }\r\n\r\n  function promiseHandler(controllerObj: any, promise: any, response: any, next: any) {\r\n    return Promise.resolve(promise)\r\n      .then((data: any) => {\r\n        let statusCode;\r\n        if (isController(controllerObj)) {\r\n          const headers = controllerObj.getHeaders();\r\n          Object.keys(headers).forEach((name: string) => {\r\n            response.set(name, headers[name]);\r\n          });\r\n\r\n          statusCode = controllerObj.getStatus();\r\n        }\r\n\r\n        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n        if (data && typeof data.pipe === 'function' && data.readable && typeof data._read === 'function') {\r\n          data.pipe(response);\r\n        } else if (data || data === false) { // === false allows boolean result\r\n          response.status(statusCode || 200).json(data);\r\n        } else {\r\n          response.status(statusCode || 204).end();\r\n        }\r\n      })\r\n      .catch((error: any) => next(error));\r\n  }\r\n\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n  function getValidatedArgs(args: any, request: any): any[] {\r\n    const fieldErrors: FieldErrors = {};\r\n    const values = Object.keys(args).map((key) => {\r\n      const name = args[key].name;\r\n      switch (args[key].in) {\r\n        case 'request':\r\n          return request;\r\n        case 'query':\r\n          return validationService.ValidateParam(args[key], request.query[name], name, fieldErrors, undefined, { \"specVersion\": 2 });\r\n        case 'path':\r\n          return validationService.ValidateParam(args[key], request.params[name], name, fieldErrors, undefined, { \"specVersion\": 2 });\r\n        case 'header':\r\n          return validationService.ValidateParam(args[key], request.header(name), name, fieldErrors, undefined, { \"specVersion\": 2 });\r\n        case 'body':\r\n          return validationService.ValidateParam(args[key], request.body, name, fieldErrors, name + '.', { \"specVersion\": 2 });\r\n        case 'body-prop':\r\n          return validationService.ValidateParam(args[key], request.body[name], name, fieldErrors, 'body.', { \"specVersion\": 2 });\r\n      }\r\n    });\r\n\r\n    if (Object.keys(fieldErrors).length > 0) {\r\n      throw new ValidateError(fieldErrors, '');\r\n    }\r\n    return values;\r\n  }\r\n\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n}\r\n\r\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n","export * from './Biogrid'\n","export interface BiogridSimulationResults {\n  energyWastedFromSource: number;\n  energyWastedInTransportation: number;\n  timeWithoutEnoughEnergy: number;\n}\n\nexport interface NewBiogridOpts {\n  startDate: Date;\n  endDate: Date;\n  smallBatteryCells: number;\n  largeBatteryCells: number;\n}\n\nexport async function createNewBiogrid(body: NewBiogridOpts) {\n  // TODO implement\n  return \"Fake\"\n}\n\nexport async function runBiogridSimulation() {\n  // TODO implement\n  return \"Fake\"\n}\n\nexport async function getSimulationResults(): Promise<BiogridSimulationResults> {\n  // TODO implement\n  return {\n    energyWastedFromSource: 10,\n    energyWastedInTransportation: 12,\n    timeWithoutEnoughEnergy: 24\n  }\n}\n","export * from './BiogridController';\n"],"sourceRoot":""}