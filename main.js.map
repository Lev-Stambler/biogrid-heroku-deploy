{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"tslib\"","webpack:///./libs/biogrid-simulator/src/lib/config/index.ts","webpack:///./apps/api/src/app/config/constants.ts","webpack:///./libs/biogrid-simulator/src/index.ts","webpack:///./libs/grid-simulator/src/index.ts","webpack:///./apps/api/src/app/config/Logger.ts","webpack:///external \"tsoa\"","webpack:///./apps/api/src/app/controllers/BiogridController.ts","webpack:///./libs/biogrid-simulator/src/lib/config/bio-constants.ts","webpack:///external \"graphlib\"","webpack:///./libs/biogrid-simulator/src/lib/biogrid-state/main-grid-item.ts","webpack:///./apps/api/src/main.ts","webpack:///./apps/api/src/app/config/Server.ts","webpack:///external \"express\"","webpack:///external \"swagger-ui-express\"","webpack:///external \"body-parser\"","webpack:///external \"morgan\"","webpack:///./apps/api/src/environments/environment.prod.ts","webpack:///./apps/api/src/app/config/ErrorHandler.ts","webpack:///external \"winston\"","webpack:///./apps/api/src/app/build/routes.ts","webpack:///./apps/api/src/app/services/index.ts","webpack:///./apps/api/src/app/services/Biogrid.ts","webpack:///./libs/biogrid-simulator/src/lib/biobattery/index.ts","webpack:///./libs/biogrid-simulator/src/lib/biobattery/biobattery-class.ts","webpack:///./libs/grid-simulator/src/lib/battery/index.ts","webpack:///./libs/grid-simulator/src/lib/brain/index.ts","webpack:///./libs/grid-simulator/src/lib/energy-source/index.ts","webpack:///./libs/grid-simulator/src/lib/grid/index.ts","webpack:///./libs/grid-simulator/src/lib/grid-action/index.ts","webpack:///./libs/grid-simulator/src/lib/grid-item/index.ts","webpack:///./libs/grid-simulator/src/lib/energyuser/index.ts","webpack:///./libs/grid-simulator/src/lib/town/index.ts","webpack:///./libs/grid-simulator/src/lib/state/index.ts","webpack:///./libs/grid-simulator/src/lib/validate-inputs/index.ts","webpack:///./libs/grid-simulator/src/lib/validate-inputs/validate-inputs.ts","webpack:///./libs/biogrid-simulator/src/lib/config/efficiency.ts","webpack:///./libs/biogrid-simulator/src/lib/biobrain/index.ts","webpack:///./libs/biogrid-simulator/src/lib/biobrain/biobrain-class.ts","webpack:///./libs/biogrid-simulator/src/lib/bioenergy-source/index.ts","webpack:///./libs/biogrid-simulator/src/lib/bioenergy-source/solar-panel.ts","webpack:///./libs/weather/src/index.ts","webpack:///./libs/weather/src/lib/weather.ts","webpack:///external \"node-fetch\"","webpack:///./libs/biogrid-simulator/src/lib/bioenergy-source/bioenergy-source.ts","webpack:///./libs/biogrid-simulator/src/lib/biogrid/index.ts","webpack:///./libs/biogrid-simulator/src/lib/biogrid/biogrid-class.ts","webpack:///./libs/biogrid-simulator/src/lib/biogrid-action/index.ts","webpack:///./libs/biogrid-simulator/src/lib/biogrid-action/biogrid-action-class.ts","webpack:///./libs/biogrid-simulator/src/lib/biogrid-state/index.ts","webpack:///./libs/biogrid-simulator/src/lib/biogrid-state/biogrid-state-class.ts","webpack:///./libs/biogrid-simulator/src/lib/building/index.ts","webpack:///./libs/biogrid-simulator/src/lib/building/building.ts","webpack:///./libs/biogrid-simulator/src/lib/community/index.ts","webpack:///./libs/biogrid-simulator/src/lib/community/ruralarea.ts","webpack:///./apps/api/src/app/controllers/index.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","module.exports = require(\"tslib\");","export * from './bio-constants'\nexport * from './efficiency'\n","import { environment } from '../../environments/environment';\n\nexport default {\n  environment: environment.production ? 'production' : 'development',\n  port: environment.port || parseInt(process.env.PORT || '3000'),\n  errorTypes: {\n    db: {\n      statusCode: 500,\n      name: 'Internal Server Error',\n      message: 'database error',\n    },\n    validation: {\n      statusCode: 400,\n      name: 'Bad Request',\n      message: 'validation error',\n    },\n    auth: { statusCode: 401, name: 'Unauthorized', message: 'auth error' },\n    forbidden: {\n      statusCode: 403,\n      name: 'Forbidden',\n      message: 'forbidden content',\n    },\n    notFound: {\n      statusCode: 404,\n      name: 'Not Found',\n      message: 'content not found',\n    },\n    entity: {\n      statusCode: 422,\n      name: 'Unprocessable Entity',\n      message: 'entity error',\n    },\n  },\n  simulation: {\n    NUMBER_OF_SIM_HOURS: 24,\n  },\n\n  get errorMap() {\n    return {\n      ValidateError: this.errorTypes.validation,\n      ValidationError: this.errorTypes.validation,\n      CastError: this.errorTypes.db,\n    };\n  },\n};\n","export * from './lib/biobattery';\nexport * from './lib/biobrain';\nexport * from './lib/bioenergy-source';\nexport * from './lib/biogrid';\nexport * from './lib/biogrid-action';\nexport * from './lib/biogrid-state';\nexport * from './lib/building';\nexport * from './lib/community';\nexport * from './lib/config'\n","export * from './lib/battery';\nexport * from './lib/brain';\nexport * from './lib/energy-source';\nexport * from './lib/grid';\nexport * from './lib/grid-action';\nexport * from './lib/grid-item';\nexport * from './lib/measurements';\nexport * from './lib/energyuser';\nexport * from './lib/town';\nexport * from './lib/state';\nexport * from './lib/validate-inputs';\n\n","import constants from './constants';\nimport * as logger from 'winston';\n\nconst date = new Date();\nconst fileName = `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}.log`;\nlogger.configure({\n  level: 'debug',\n  format: logger.format.combine(\n    logger.format.colorize(),\n    logger.format.simple()),\n  transports: [\n    new logger.transports.File({ filename: `logs/${fileName}`, level: 'debug' }),\n    new logger.transports.Console()\n  ]\n});\n\nexport class Logger {\n  public static readonly shouldLog: boolean = constants.environment !== 'test';\n  public static readonly console = logger;\n\n  public static log(...args: unknown[]): void {\n    if (Logger.shouldLog) Logger.console.debug(Logger.formatArgs(args));\n  }\n\n  public static warn(...args: unknown[]): void {\n    if (Logger.shouldLog) Logger.console.warn(Logger.formatArgs(args));\n  }\n\n  public static error(...args: unknown[]): void {\n    if (Logger.shouldLog) Logger.console.error(Logger.formatArgs(args));\n  }\n\n  public static info(...args: unknown[]): void {\n    if (Logger.shouldLog) Logger.console.info(Logger.formatArgs(args));\n  }\n\n  public static verbose(...args: unknown[]): void {\n    if (Logger.shouldLog) Logger.console.verbose(Logger.formatArgs(args));\n  }\n\n  private static formatArgs(args: unknown[]): string {\n    return JSON.stringify(args, null, 4);\n  }\n\n}\n","module.exports = require(\"tsoa\");","import { Route, Controller, Post, Body, SuccessResponse } from 'tsoa';\n\nimport {\n  simulateNewBiogrid,\n  BiogridSimulationResults,\n  NewBiogridOpts,\n} from '../services';\n\n@Route('biogrid')\nexport class BiogridController extends Controller {\n  constructor() {\n    super();\n  }\n\n  @SuccessResponse(200)\n  @Post('/simulate')\n  public async SimulateNewBiogrid(@Body() body: NewBiogridOpts): Promise<BiogridSimulationResults> {\n    return await simulateNewBiogrid(body);\n  }\n}\n","import { BioBattery, Building, SolarPanel } from '@biogrid/biogrid-simulator';\nimport { Path } from 'graphlib';\nimport { EnergyUsageByTimeOfDay } from '@biogrid/grid-simulator';\n\n/**\n * These values are for a small battery which store a maximum 48-volts 6.5kWh\n * and supply upto 3 houses per hour depending on the charge\n * These small batteries are standalone batteries which support the system that relies on solar\n * @see https://www.altenergymag.com/article/2018/04/lead-acid-batteries-for-solar-storage/28297/\n * New batteries have a capacity smaller than the maximum as default start energy\n */\nexport const SMALL_BATTERY = {\n  DEFAULT_START_ENERGY: 4.5,\n  MAX_CAPACITY: 6.5,\n};\n\n/**\n * The values are for large batteries which store a maximum of 950 kWh\n * which is approximately equal the amount of power for a building in a month\n * @see https://www.altenergymag.com/article/2018/03/california-pilots-a-new-approach-to-balancing-with-li-ion-energy-storage/28204/\n * New large batteries have a capacity smaller than the maximum implemented as default start energy\n */\nexport const LARGE_BATTERY = {\n  DEFAULT_START_ENERGY: 30,\n  MAX_CAPACITY: 950,\n};\n\n/**\n * Each day a solar panel is roughly charged with electricity\n * for 4hours at a rate of 250 watts ~ 1000watts-hours\n * Solar panels have a range which they can produce\n * These solar panels will have a minimum 240 watts-hour when the sunlight is not enough\n */\nexport const SOLAR_PANEL = {\n  AREA: 10,\n  DEFAULT_INITIAL_ENERGY: 250,\n  KILOLUX_TO_KILOWATT_PER_SQUARE_METER: 0.0079,\n  MIN_CAPACITY: 240,\n  CLEAR_SKY_POWER_WATTS: 990,\n  CLOUD_COVERAGE_SCALING_CONSTANT: 0.75,\n};\n\nexport const enum GRID_ITEM_NAMES {\n  GRID = 'grid',\n  ENERGY_USER = 'energy_user',\n  LARGE_BATTERY = 'large_battery',\n  SMALL_BATTERY = 'small_battery',\n  SOLAR_PANEL = 'solar_panel',\n}\n\nexport const GRID_DISTANCES = {\n  // The discrete unit of distance for laying items apart, both vertically and horizontally\n  // So, every item is 1 * INCREMENTS_KM, 2 * INCREMENTS_KM, 3 * INCREMENTS_KM, etc... km apart on the x and y plane\n  INCREMENTS_KM: 0.5,\n};\n\n/**\n * Resistance of the differents components used in the grid\n * For transportation of power, wire 16 of awg is used for transmission lines\n * @see https://www.cs.rochester.edu/users/faculty/nelson/courses/csc_robocon/robot_manual/wiring.html#:~:text=Gauges%20of%20AWG%2016%20and,0%2C%2000%2C%20or%20larger.\n * The wires have a constant resistance per length\n * @see https://en.wikipedia.org/wiki/American_wire_gauge#Tables_of_AWG_wire_sizes for these values\n * The resistance is measured in ohms (Ω) unless specified otherwise\n * Buildings use majorly awg wire 13\n * @see https://homeguides.sfgate.com/estimate-amount-wire-needed-rewire-average-home-105819.html\n * Average house requires 7.25 rolls of a 50ft-roll\n * Batteries have inter resistance of about 0.7 - 1.2 Ω. In here, we are considering the average of these values\n * @see http://newport.eecs.uci.edu/~chou/pdf/chou-islped04-loadmatch.pdf\n * For small batteries we are considering the @insert value // TODO insert value\n * Solar panels have an average resistance of 3.617\n * @see http://waterheatertimer.org/Resistance-and-solar-panels.html\n */\nexport const RESISTANCE = {\n  BUILDING: 0.726,\n  // TODO get the right value for the resistance of the grid\n  GRID: 0.2,\n  // Average resistance\n  LARGE_BATTERY: 0.95,\n  // Represents the resistances of awg wire 16\n  RESISTANCE_16: 13.17, // Measured in ohm/km\n  // TODO insert the correct resistance for the small batteries used\n  SMALL_BATTERY: 0.4,\n  // TODO insert the correct resistance for the solar panels used\n  SOLAR_PANEL: 3.617,\n};\n\n/**\n * A building uses approximately 1000 KWh (kilo watts hour) per month,\n * which is approximately 32KWh per day and 1.3KWh per hour\n * @see https://homeprofessionals.org/solar/average-kwh-usage-for-a-2000-sq-ft-home/#:~:text=The%20average%202%2C000%20sq.,customer%20in%20a%20residential%20unit.\n */\nexport const BUILDING = {\n  DEFAULT_INITIAL_ENERGY: 1.3,\n  MAX_CAPACITY: 32,\n  MIN_CAPACITY: 0,\n  /**\n   * Source is from Research Gate\n   * @see https://www.researchgate.net/publication/326358349/figure/fig2/AS:647731865477122@1531442719619/Average-daily-energy-consumption-during-the-weekdays-and-the-variation-throughout-the.png\n   */\n  ENERGY_USAGE_KILOWATT_BY_TIME_OF_DAY: {\n    '0': 8,\n    '1': 6,\n    '2': 4.25,\n    '3': 4,\n    '4': 4.25,\n    '5': 4,\n    '6': 5,\n    '7': 6.2,\n    '8': 5,\n    '9': 5,\n    '10': 5,\n    '11': 4.75,\n    '12': 4.75,\n    '13': 4.5,\n    '14': 4.75,\n    '15': 5,\n    '16': 5.5,\n    '17': 6,\n    '18': 7,\n    '19': 10,\n    '20': 9.5,\n    '21': 9,\n    '22': 11,\n    '23': 11,\n  } as EnergyUsageByTimeOfDay\n};\n\nexport type SupplyingAgents = BioBattery | SolarPanel;\n\nexport type RecievingAgents = BioBattery[] | Building[];\n\nexport interface ShortestDistances {\n  [source: string]: { [node: string]: Path };\n}\n\nexport const TIME = {\n  DISCRETE_UNIT_HOURS: 1,\n};\n","module.exports = require(\"graphlib\");","/**\n * @summary is a class which defines the grid which is always in the middle of the town\n * @author Roland Naijuka <rnaijuka@google.com>\n *\n * Created at     : 7/31/2020, 11:50:42 AM\n * Last modified  : 7/29/2020, 11:58:17 AM\n */\n\nimport { GridItem, ItemPosition, TownSize } from '@biogrid/grid-simulator';\nimport { GRID_ITEM_NAMES, RESISTANCE } from '../config';\n\nexport class MAIN_GRID implements GridItem {\n  gridItemName: string = GRID_ITEM_NAMES.GRID;\n  gridItemResistance: number = RESISTANCE.GRID;\n  // \n  private readonly relativePosition: ItemPosition\n  constructor(townSize: TownSize) {\n    // Add the grid in the center of the town based on the townSize\n    this.relativePosition = {\n      x: Math.floor(townSize.width / 2),\n      y: Math.floor(townSize.height / 2),\n    }\n  }\n\n  getRelativePosition() {\n    return this.relativePosition;\n  }\n}\n","import { Server } from './app/config/Server';\n\nconst server: Server = new Server();\n\nserver.listen();\n","import express from 'express';\nimport * as swaggerUi from 'swagger-ui-express';\nimport * as bodyParser from 'body-parser';\nimport morgan from 'morgan';\n\nimport constants from './constants';\nimport { ErrorHandler } from './ErrorHandler';\nimport { RegisterRoutes } from '../build/routes';\nimport { Logger } from './Logger';\nimport '../controllers';\n\nexport class Server {\n  public app: express.Express = express();\n  private readonly port: number = constants.port;\n\n  constructor() {\n    this.app.use(this.allowCors);\n    this.app.use(bodyParser.urlencoded({ extended: true }));\n    this.app.use(bodyParser.json());\n    this.app.use(morgan('dev', { skip: () => !Logger.shouldLog }));\n    RegisterRoutes(this.app);\n    this.app.use(ErrorHandler.handleError);\n    this.serveStaticFiles();\n\n    // Disable linter as require statement is necessary for swagger files\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const swaggerDocument = require('../build/swagger.json');\n\n    this.app.use(\n      '/api-docs',\n      swaggerUi.serve,\n      swaggerUi.setup(swaggerDocument)\n    );\n  }\n\n  public async listen(port: number = this.port) {\n    process.on('uncaughtException', this.criticalErrorHandler);\n    process.on('unhandledRejection', this.criticalErrorHandler);\n    const listen = this.app.listen(this.port);\n    Logger.info(\n      `${constants.environment} server running on port: ${this.port}`\n    );\n    return listen;\n  }\n\n  /**\n   * Serve the built, static frontend files for production\n   */\n  private serveStaticFiles() {\n    const staticDir = __dirname + '/build/public';\n    this.app.use(express.static(staticDir));\n  }\n\n  private criticalErrorHandler(...args: unknown[]) {\n    Logger.error('Critical Error...', ...args);\n    process.exit(1);\n  }\n\n  private allowCors(\n    req: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ): void {\n    // TODO: in a later PR only specific sites will have access. For now, as we get setup, any site can have API access\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header(\n      'Access-Control-Allow-Headers',\n      'Origin, X-Requested-With, Content-Type, Accept, Authorization, apikey, x-access-token'\n    );\n    next();\n  }\n}\n","module.exports = require(\"express\");","module.exports = require(\"swagger-ui-express\");","module.exports = require(\"body-parser\");","module.exports = require(\"morgan\");","export const environment = {\n  production: true,\n  // Leave port null so that the Heroku env variable can override it\n  port: null\n};\n","import { Request, Response, NextFunction } from 'express';\n\nimport constants from './constants';\nimport { Logger } from './Logger';\n\nexport interface ErrorType {\n  statusCode: number;\n  name: string;\n  message: string;\n  fields?: { [field: string]: { message: string } };\n}\n\nexport class ApiError extends Error implements ErrorType {\n  public statusCode = 500;\n  public fields?: { [field: string]: { message: string } };\n\n  constructor(errorType: ErrorType) {\n    super(errorType.message);\n    this.name = errorType.name;\n    if (errorType.statusCode) {\n      this.statusCode = errorType.statusCode;\n    }\n    this.fields = errorType.fields;\n  }\n}\n\nexport class ErrorHandler {\n  public static handleError(\n    error: ApiError,\n    req: Request,\n    res: Response,\n    next: NextFunction\n  ): void {\n    const { name, message, fields, statusCode } = error;\n    Logger.error(\n      `Error: ${statusCode}`,\n      `Error Name: ${name}`,\n      `Error Message: ${message}`,\n      'Error Fields:',\n      fields || {},\n      'Original Error: ',\n      error\n    );\n    res.status(statusCode).json({ name, message, fields });\n    next();\n  }\n}\n","module.exports = require(\"winston\");","/* tslint:disable */\r\n/* eslint-disable */\r\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\nimport { Controller, ValidationService, FieldErrors, ValidateError, TsoaRoute } from 'tsoa';\r\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\nimport { BiogridController } from './../controllers/BiogridController';\r\nimport * as express from 'express';\r\n\r\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\nconst models: TsoaRoute.Models = {\r\n  \"BiogridSimulationResults\": {\r\n    \"dataType\": \"refObject\",\r\n    \"properties\": {\r\n      \"energyWastedFromSource\": { \"dataType\": \"double\" },\r\n      \"energyWastedInTransportation\": { \"dataType\": \"double\" },\r\n      \"timeWithoutEnoughEnergy\": { \"dataType\": \"double\" },\r\n      \"townSize\": { \"dataType\": \"nestedObjectLiteral\", \"nestedProperties\": { \"height\": { \"dataType\": \"double\", \"required\": true }, \"width\": { \"dataType\": \"double\", \"required\": true } }, \"required\": true },\r\n      \"states\": { \"dataType\": \"array\", \"array\": { \"dataType\": \"any\" }, \"required\": true },\r\n      \"averageEfficiency\": { \"dataType\": \"double\", \"required\": true },\r\n    },\r\n    \"additionalProperties\": true,\r\n  },\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n  \"NewBiogridOpts\": {\r\n    \"dataType\": \"refObject\",\r\n    \"properties\": {\r\n      \"startDate\": { \"dataType\": \"datetime\", \"required\": true },\r\n      \"smallBatteryCells\": { \"dataType\": \"double\", \"required\": true },\r\n      \"largeBatteryCells\": { \"dataType\": \"double\", \"required\": true },\r\n      \"numBuildings\": { \"dataType\": \"double\", \"required\": true },\r\n      \"numSolarPanels\": { \"dataType\": \"double\", \"required\": true },\r\n      \"townHeight\": { \"dataType\": \"double\", \"required\": true },\r\n      \"townWidth\": { \"dataType\": \"double\", \"required\": true },\r\n    },\r\n    \"additionalProperties\": true,\r\n  },\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n};\r\nconst validationService = new ValidationService(models);\r\n\r\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\nexport function RegisterRoutes(app: express.Express) {\r\n  // ###########################################################################################################\r\n  //  NOTE: If you do not see routes for all of your controllers in this file, then you might not have informed tsoa of where to look\r\n  //      Please look into the \"controllerPathGlobs\" config option described in the readme: https://github.com/lukeautry/tsoa\r\n  // ###########################################################################################################\r\n  app.post('/api/biogrid/simulate',\r\n    function(request: any, response: any, next: any) {\r\n      const args = {\r\n        body: { \"in\": \"body\", \"name\": \"body\", \"required\": true, \"ref\": \"NewBiogridOpts\" },\r\n      };\r\n\r\n      // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n      let validatedArgs: any[] = [];\r\n      try {\r\n        validatedArgs = getValidatedArgs(args, request);\r\n      } catch (err) {\r\n        return next(err);\r\n      }\r\n\r\n      const controller = new BiogridController();\r\n\r\n\r\n      const promise = controller.SimulateNewBiogrid.apply(controller, validatedArgs as any);\r\n      promiseHandler(controller, promise, response, next);\r\n    });\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n  function isController(object: any): object is Controller {\r\n    return 'getHeaders' in object && 'getStatus' in object && 'setStatus' in object;\r\n  }\r\n\r\n  function promiseHandler(controllerObj: any, promise: any, response: any, next: any) {\r\n    return Promise.resolve(promise)\r\n      .then((data: any) => {\r\n        let statusCode;\r\n        if (isController(controllerObj)) {\r\n          const headers = controllerObj.getHeaders();\r\n          Object.keys(headers).forEach((name: string) => {\r\n            response.set(name, headers[name]);\r\n          });\r\n\r\n          statusCode = controllerObj.getStatus();\r\n        }\r\n\r\n        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n        if (data && typeof data.pipe === 'function' && data.readable && typeof data._read === 'function') {\r\n          data.pipe(response);\r\n        } else if (data || data === false) { // === false allows boolean result\r\n          response.status(statusCode || 200).json(data);\r\n        } else {\r\n          response.status(statusCode || 204).end();\r\n        }\r\n      })\r\n      .catch((error: any) => next(error));\r\n  }\r\n\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n  function getValidatedArgs(args: any, request: any): any[] {\r\n    const fieldErrors: FieldErrors = {};\r\n    const values = Object.keys(args).map((key) => {\r\n      const name = args[key].name;\r\n      switch (args[key].in) {\r\n        case 'request':\r\n          return request;\r\n        case 'query':\r\n          return validationService.ValidateParam(args[key], request.query[name], name, fieldErrors, undefined, { \"specVersion\": 2 });\r\n        case 'path':\r\n          return validationService.ValidateParam(args[key], request.params[name], name, fieldErrors, undefined, { \"specVersion\": 2 });\r\n        case 'header':\r\n          return validationService.ValidateParam(args[key], request.header(name), name, fieldErrors, undefined, { \"specVersion\": 2 });\r\n        case 'body':\r\n          return validationService.ValidateParam(args[key], request.body, name, fieldErrors, name + '.', { \"specVersion\": 2 });\r\n        case 'body-prop':\r\n          return validationService.ValidateParam(args[key], request.body[name], name, fieldErrors, 'body.', { \"specVersion\": 2 });\r\n      }\r\n    });\r\n\r\n    if (Object.keys(fieldErrors).length > 0) {\r\n      throw new ValidateError(fieldErrors, '');\r\n    }\r\n    return values;\r\n  }\r\n\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n}\r\n\r\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n","export * from './Biogrid'\n","import {\n  Biogrid,\n  RuralArea,\n  Building,\n  BioBrain,\n  GRID_ITEM_NAMES,\n  BUILDING,\n} from '@biogrid/biogrid-simulator';\nimport { ItemPosition, TownSize } from '@biogrid/grid-simulator';\nimport constants from '../config/constants';\nexport interface BiogridSimulationResults {\n  energyWastedFromSource?: number;\n  energyWastedInTransportation?: number;\n  timeWithoutEnoughEnergy?: number;\n  townSize: {\n    width: number;\n    height: number;\n  };\n  states: any[];\n  averageEfficiency: number;\n}\n\nexport interface NewBiogridOpts {\n  startDate: Date;\n  smallBatteryCells: number;\n  largeBatteryCells: number;\n  numBuildings: number;\n  numSolarPanels: number;\n  townHeight: number;\n  townWidth: number;\n}\n\nfunction createRandomBuildingPosition(\n  townWidth: number,\n  townHeight: number\n): ItemPosition {\n  const x = Math.floor(Math.random() * townWidth);\n  const y = Math.floor(Math.random() * townHeight);\n  return {\n    x,\n    y,\n  };\n}\n\n// TODO, allow users to specify where the buildings are on the grid rather than randomly scatter\n// The issue can be found on https://github.com/googleinterns/step141-2020/issues/59\nexport async function simulateNewBiogrid(\n  body: NewBiogridOpts\n): Promise<BiogridSimulationResults> {\n  const buildings: Building[] = [];\n  for (let i = 0; i < body.numBuildings; i++) {\n    const randomPos = createRandomBuildingPosition(\n      body.townWidth,\n      body.townHeight\n    );\n    buildings.push(\n      new Building({\n        energy: BUILDING.DEFAULT_INITIAL_ENERGY,\n        x: randomPos.x,\n        y: randomPos.y,\n        gridItemName: `${GRID_ITEM_NAMES.ENERGY_USER}-${i}`,\n      })\n    );\n  }\n  const town = new RuralArea(buildings, body.townWidth, body.townHeight);\n  const biogrid = new Biogrid(town, {\n    numberOfLargeBatteryCells: body.largeBatteryCells,\n    numberOfSmallBatteryCells: body.smallBatteryCells,\n    numberOfSolarPanels: body.numSolarPanels,\n    startDate: body.startDate,\n  });\n  const biobrain = BioBrain.Instance;\n  const initState = biogrid.getSystemState();\n  const statesJson = [];\n  const currentDate = body.startDate;\n  const efficiencies: number[] = [];\n  for (let i = 0; i < constants.simulation.NUMBER_OF_SIM_HOURS; i++) {\n    // Start at midnight, increment hours until NUMBER_OF_SIM_HOURS reached\n    currentDate.setHours(i);\n    biogrid.updateEnergyUsage(currentDate);\n    const action = await biobrain.computeAction(initState, currentDate);\n    biogrid.takeAction(action);\n    statesJson.push(biogrid.getJsonGraphDetails());\n    efficiencies.push(biogrid.getEfficiency());\n  }\n  const efficienciesAddedUp = efficiencies\n    .filter((efficiency) => efficiency)\n    .reduce((prev, curr) => prev + curr, 0);\n\n  return {\n    energyWastedFromSource: 10,\n    energyWastedInTransportation: 12,\n    timeWithoutEnoughEnergy: 24,\n    states: statesJson,\n    townSize: biogrid.getTownSize(),\n    averageEfficiency: efficienciesAddedUp / efficiencies.length,\n  };\n}\n","export * from './biobattery-class';\n","import {\n  Battery,\n  Distance,\n  Energy,\n  ItemPosition,\n  Validatable,\n  validate,\n} from '@biogrid/grid-simulator';\nimport { SMALL_BATTERY } from '../config';\n\nexport interface BatteryParams {\n  x: Distance,\n  y: Distance,\n  gridItemName: string,\n  gridItemResistance: number,\n  energyInKiloWattHour: Energy,\n  maxCapacity?: Energy,\n}\n\nexport class BioBattery implements Battery {\n  private energyInKiloWattHour: Energy;\n  private readonly maxCapacity: Energy = SMALL_BATTERY.MAX_CAPACITY;\n  // name of the grid item is unique to the battery type, but they have a similar prefix\n  gridItemName: string;\n  // The resistance measured in ohms\n  gridItemResistance: number;\n  private readonly relativePosition: ItemPosition;\n\n  /**\n   * Take in a relativePosition which is generated by the grid class so that batteries\n   * are evenly spaced out.\n   * The relativePositions have been verified in the Biogrid class\n   * @param x Distance from the left edge of the town\n   * @param y Distance from the top edge of the town\n   */\n  constructor(batteryParams: BatteryParams) {\n    this.relativePosition = { x: batteryParams.x, y: batteryParams.y };\n    if (!this.validateInputs(batteryParams.energyInKiloWattHour, batteryParams.maxCapacity)) {\n      // TODO return a tuple of from validate to with the boolean and unpassed validations\n      throw new Error(\n        `Cannot create a battery with values: (${batteryParams.energyInKiloWattHour}, ${batteryParams.maxCapacity})`\n      );\n    }\n    this.energyInKiloWattHour = batteryParams.energyInKiloWattHour;\n    if (batteryParams.maxCapacity) {\n      this.maxCapacity = batteryParams.maxCapacity;\n    }\n    this.gridItemName = batteryParams.gridItemName;\n    this.gridItemResistance = batteryParams.gridItemResistance;\n  }\n\n  getRelativePosition() {\n    return this.relativePosition;\n  }\n\n  startCharging(inputPower: Energy): void {\n    if (this.energyInKiloWattHour + inputPower > this.maxCapacity) {\n      this.energyInKiloWattHour = this.maxCapacity;\n    }\n    this.energyInKiloWattHour += inputPower;\n  }\n\n  // TODO implement when you use a formula for charging a battery\n  stopCharging(): void {}\n\n  supplyPower(outputenergy: Energy): Energy {\n    if (this.energyInKiloWattHour - outputenergy < 0) {\n      //TODO implement the function to notify the request with amount of output left\n      const temp: Energy = this.energyInKiloWattHour;\n      this.energyInKiloWattHour = 0;\n      return temp;\n    }\n    this.energyInKiloWattHour -= outputenergy;\n    return outputenergy;\n  }\n\n  private validateInputs(\n    energyInKiloWattHour: Energy,\n    maxCapacity: Energy = this.maxCapacity\n  ) {\n    const batteryValidator: Validatable = {\n      value: energyInKiloWattHour,\n      max: maxCapacity,\n      isPositive: energyInKiloWattHour >= 0 && maxCapacity >= 0,\n    };\n    return validate(batteryValidator);\n  }\n\n  getEnergyInKilowattHour(): Energy {\n    return this.energyInKiloWattHour;\n  }\n\n  getMaxCapacity(): Energy {\n    return this.maxCapacity;\n  }\n\n  isEmpty(): boolean {\n    return this.energyInKiloWattHour === 0;\n  }\n\n  isFull(): boolean {\n    return this.energyInKiloWattHour === this.maxCapacity;\n  }\n}\n","export * from './battery-interface';\n","export * from './brain-interface';\n","export * from './energy-source-interface';\n","export * from './grid-interface'\n","export * from './grid-action-interface'\n","export * from './grid-item'\n","export * from './energyuser'\n","export * from './town'\n","export * from './state-interface'\n","export * from './validate-inputs';\n","// Validation\nexport interface Validatable {\n  value: number;\n  min?: number;\n  max?: number;\n  isPositive: boolean;\n}\n\nexport function validate(validatableInput: Validatable): boolean {\n  let isValid = true;\n  if (\n    validatableInput.min != null &&\n    typeof validatableInput.value === 'number') {\n      isValid = isValid && validatableInput.value >= validatableInput.min;\n  }\n  if (\n    validatableInput.max != null &&\n    typeof validatableInput.value === 'number'\n  ) {\n    isValid = isValid && validatableInput.value <= validatableInput.max;\n  }\n  return isValid && validatableInput.isPositive;\n}\n","import { RESISTANCE } from \".\";\nimport { Power } from '@biogrid/grid-simulator';\n/**\n * This function calculates the resistance of a given length of WIRE 16 AWG which is the one we are using for our transmission\n * The wire has a constant reistance per kilometre, thus multiplying by the length of the wire gives \n * the resistance of that whole wire\n * @param length the length of the wire which is synonymous to the distance between the supplier and reciever of power\n * @returns the resistance of the wire for calculate the power loss\n */\nexport function calculateResistance(length: number, isMetre: boolean = false) {\n  // Change the metre values to kilometres\n  if (isMetre) {\n    length = length / 1000;\n  }\n  return (RESISTANCE.RESISTANCE_16 * length);\n}\n\n/**\n * This function calculates the current passing through the circuit at any given time using the physics \n * equation of calculating current, I = V / R where I is the current, V is voltage, R is resistance\n * @param voltage is the voltage of the circuit at that particular point\n * @param loadResistance is the resistance for the grid items in the shortest path\n * @param wireResistance is the resistance of the wires\n * @returns the current flowing in that particular circuit\n */\nexport function calculateCurrent(voltage: number, loadResistance: number, wireResistance: number) {\n  return (voltage / (loadResistance + wireResistance));\n}\n\n/**\n * This function calculates the voltage loss while passing through the wires using the physics \n * equation of calculating voltage. V = I * R where V is voltage, I is current and R is resistance\n * @param current is the current in the circuit\n * @param resistance is the resistance of the wires\n * @returns the voltage lost while transport through the wires\n */\nexport function calculateVoltage(current: number, resistance: number) {\n  return (current * resistance);\n}\n\n/**\n * This function calculates the power in the circuit for usage in the efficiency\n * It calculates this based on the two physics equations\n *    1. P = V * I\n *    2. I = V / R\n * where P is power, V is voltage, I is current and R is resistance\n * Since current is constant in circuits\n * Th final equation used is P = V^2 / R\n * @param voltage is the voltage in the circuit at that particular time\n * @param resistance is the resistance of the wires\n * @return the power transport over the given @param resistance\n */\nexport function calculatePower(voltage: number, resistance: number) {\n  return (Math.pow(voltage, 2) / resistance);\n}\n\n/**\n * This function calculates the power in the circuit for usage in the efficiency\n * It calculates this based on the two physics equations\n *    1. P = V * I\n *    2. V = I * R\n * where P is power, V is voltage, I is current and R is resistance\n * Since current is constant in circuits\n * Th final equation implemented is P = I^2 * R\n * @param current is the current in the circuit at that particular time\n * @param resistance is the resistance of the wires\n * @return the power transport over the given @param resistance\n */\nexport function calculatePowerWithCurrent(current: number, resistance: number) {\n  return (Math.pow(current, 2) * resistance);\n}\n\n/**\n * This function is used to calculate the current in the circuit using the given @param power\n * It calculates the current based on these physics equations for electricity\n *    1. P = V * I\n *    2. V = I * R\n * From these two equations, we can deduce that, 3. P = I^2 * R\n * where P is power, V is voltage, I is current and R is resistance\n * The final equation implemented is the reverse of equation 3, with I = sqrt(P * R)\n * @param power is the power coming in the circuit\n * @param resistance is the resistance of the circuit\n * @returns the current that is going through the circuit over the given @param resistance\n */\nexport function calculateCurrentFromPower(power: number, resistance: number) {\n  return Math.sqrt(power / resistance);\n}\n\n/**\n * This function is used to calculate the voltage in the circuit using the given @param power\n * @param power is the power coming in the circuit\n * @param resistance is the resistance of the circuit\n * @returns the voltage that is going through the circuit over the given @param resistance\n */\nexport function calculateVoltageFromPower(power: number, resistance: number) {\n  return Math.sqrt(power * resistance);\n}\n\n/**\n * This function calculates the efficiency of the circuit or system.\n * It bases this from the physics equation for calculting efficiency in a circuit\n * Efficiency = P_output / P_input * 100%\n * where P_output is the power output of the circuit, and P_input is the power input into that same circuit\n * @param input is the input Power at the beginning of the circuit\n * @param output is the output power at the end of the the circuit\n * @returns the efficiency of the system which is in percentages\n */\nexport function calculateEfficiency(input: Power, output: Power) {\n  return (output / input) * 100;\n}\n","export * from './biobrain-class';\n","import {\n  Brain,\n  GridAction,\n  StateGraph,\n  SupplyingPath,\n  GridItem,\n  Power,\n  Energy,\n} from '@biogrid/grid-simulator';\nimport {\n  BiogridAction,\n  Building,\n  BioBattery,\n} from '@biogrid/biogrid-simulator';\nimport * as config from '../config';\nimport { Path, Graph } from 'graphlib';\nimport { SolarPanel } from '../bioenergy-source';\nimport { GRID_ITEM_NAMES } from '../config';\n\ninterface GridItemsList {\n  [config.GRID_ITEM_NAMES.ENERGY_USER]: Building[];\n  [config.GRID_ITEM_NAMES.SMALL_BATTERY]: BioBattery[];\n  [config.GRID_ITEM_NAMES.LARGE_BATTERY]: BioBattery[];\n  [config.GRID_ITEM_NAMES.SOLAR_PANEL]: SolarPanel[];\n}\n\ninterface ResultingSupplyingPath {\n  supplyingPath: SupplyingPath;\n  inputPower: Power;\n  outputPower: Power;\n}\n\n// We can only have one BioBrain per grid\nexport class BioBrain implements Brain {\n  private static instance: BioBrain;\n  private clonedGraph: Graph = new Graph();\n  private constructor() {}\n\n  // Access the singleton of the Brain\n  static get Instance(): BioBrain {\n    if (!this.instance) {\n      this.instance = new BioBrain();\n    }\n    return this.instance;\n  }\n\n  async computeAction(\n    state: StateGraph,\n    date = new Date()\n  ): Promise<GridAction> {\n    // TODO calculate the efficiency for every transportation of power\n    // Get the shortest distances between each gridItem to the rest of the gridItems\n    const shortestDistances = state.getShortestDistances();\n\n    // Create a clone of the graph becfore using it\n    this.clonedGraph = state.cloneStateGraph();\n\n    // Create an object of buildings with the energyProviders which supplied\n    const buildingSuppliers: ResultingSupplyingPath = await this.chargeBuildings(\n      shortestDistances,\n      date\n    );\n\n    // Create an object of smallBatteries with the energyProviders which supplied\n    const smallBatterySupplier: ResultingSupplyingPath = await this.chargeSmallBatteries(\n      shortestDistances,\n      date\n    );\n    // Create an object of largeBatteries with the energyProviders which supplied\n    const largeBatterySupplier: ResultingSupplyingPath = await this.chargeLargebatteries(\n      shortestDistances,\n      date\n    );\n    const totalPowerInput = this.calculateTotalInputPower(\n      buildingSuppliers.inputPower,\n      smallBatterySupplier.inputPower,\n      largeBatterySupplier.inputPower\n    );\n\n    const totalPowerOutput = this.calculateTotalOutputPower(\n      buildingSuppliers.outputPower,\n      smallBatterySupplier.outputPower,\n      largeBatterySupplier.outputPower\n    );\n\n    const efficiency = config.calculateEfficiency(\n      totalPowerInput,\n      totalPowerOutput\n    );\n    return new BiogridAction(\n      {\n        ...buildingSuppliers.supplyingPath,\n        ...smallBatterySupplier.supplyingPath,\n        ...largeBatterySupplier.supplyingPath,\n      },\n      efficiency\n    );\n  }\n\n  private calculateTotalInputPower(\n    buildingInput: Power,\n    sBatteryInput: Power,\n    lBatteryInput: Power\n  ) {\n    return buildingInput + sBatteryInput + lBatteryInput;\n  }\n\n  private calculateTotalOutputPower(\n    buildingOutput: Power,\n    sBatteryOutput: Power,\n    lBatteryOutput: Power\n  ) {\n    return buildingOutput + sBatteryOutput + lBatteryOutput;\n  }\n\n  /**\n   * This method gets the different griditems and places them in their respective classes\n   * This is implemented from the cloned graph so that we can change the items without\n   * changing the original state graph as well as keeping track of which supplying grid\n   * item has given off power so that one doesn't call the same grid items and then get\n   * an error as the item might not have energy in it\n   * @returns an object of key-value pair @enum GRID_ITEM_NAMES : respective grid items list\n   */\n  private getGridItems(): GridItemsList {\n    const buildings: Building[] = [];\n    const smallBatteries: BioBattery[] = [];\n    const largeBatteries: BioBattery[] = [];\n    const solarPanels: SolarPanel[] = [];\n\n    const allGridItems = this.clonedGraph.nodes();\n    // TODO: Implement with instanceof\n    // @see https://github.com/googleinterns/step141-2020/issues/54\n    allGridItems.map((item) => {\n      const gridItem = this.clonedGraph.node(item);\n      if (gridItem.gridItemName.includes(config.GRID_ITEM_NAMES.ENERGY_USER)) {\n        buildings.push(gridItem as Building);\n      } else if (\n        gridItem.gridItemName.includes(config.GRID_ITEM_NAMES.SMALL_BATTERY)\n      ) {\n        smallBatteries.push(gridItem as BioBattery);\n      } else if (\n        gridItem.gridItemName.includes(config.GRID_ITEM_NAMES.LARGE_BATTERY)\n      ) {\n        largeBatteries.push(gridItem as BioBattery);\n      } else if (\n        gridItem.gridItemName.includes(config.GRID_ITEM_NAMES.SOLAR_PANEL)\n      ) {\n        solarPanels.push(gridItem as SolarPanel);\n      }\n    });\n\n    return {\n      [config.GRID_ITEM_NAMES.ENERGY_USER]: buildings,\n      [config.GRID_ITEM_NAMES.SMALL_BATTERY]: smallBatteries,\n      [config.GRID_ITEM_NAMES.LARGE_BATTERY]: largeBatteries,\n      [config.GRID_ITEM_NAMES.SOLAR_PANEL]: solarPanels,\n    };\n  }\n\n  /**\n   * This method is used for charging individual largeBatteries which might not have enough energy\n   * It calls the @method determineSupplyingPath which calculates which supplier can give these large batteries power\n   * @returns @interface ResultingSupplyingPath which holds a key value pair of @interface supplyingPath requesting mapping to\n   * the one which can supplying, powerInput, and powerOutput\n   */\n  private async chargeLargebatteries(\n    shortestDistances: {\n      [source: string]: { [node: string]: Path };\n    },\n    date: Date\n  ): Promise<ResultingSupplyingPath> {\n    const gridItems = this.getGridItems();\n    let largeBatteries: BioBattery[] =\n      gridItems[config.GRID_ITEM_NAMES.LARGE_BATTERY];\n    const solarPanels: SolarPanel[] =\n      gridItems[config.GRID_ITEM_NAMES.SOLAR_PANEL];\n    // Assuming the large battery is not fully charged\n    largeBatteries = largeBatteries.filter((battery) => !battery.isFull());\n\n    // Filter the solar panels and remove the ones with the minimum energy or empty\n    const solarPanelsFiltered = await this.filterSolarPanelsByEnergyAmount(\n      solarPanels,\n      date\n    );\n\n    // Create an array of the possible energy givers\n    const allEnergyProviders = [...solarPanelsFiltered];\n\n    return await this.determineSupplyingPath(\n      largeBatteries,\n      allEnergyProviders,\n      shortestDistances,\n      date\n    );\n  }\n\n  /**\n   * This method is used for charging individual smallBatteries which might not have energy energy\n   * It calls the @method determineSupplyingPath which calculates which supplier can give these small batteries power\n   * @returns @interface ResultingSupplyingPath which holds a key value pair of @interface supplyingPath requesting mapping to\n   * the one which can supplying, powerInput, and powerOutput\n   */\n  private async chargeSmallBatteries(\n    shortestDistances: {\n      [source: string]: { [node: string]: Path };\n    },\n    date: Date\n  ): Promise<ResultingSupplyingPath> {\n    const gridItems = this.getGridItems();\n    let smallBatteries: BioBattery[] =\n      gridItems[config.GRID_ITEM_NAMES.SMALL_BATTERY];\n    let largeBatteries: BioBattery[] =\n      gridItems[config.GRID_ITEM_NAMES.LARGE_BATTERY];\n    const solarPanels: SolarPanel[] =\n      gridItems[config.GRID_ITEM_NAMES.SOLAR_PANEL];\n\n    // Assuming the small batteries are not fully charged\n    smallBatteries = smallBatteries.filter((battery) => !battery.isFull());\n\n    // Filter the large batteries and remove the ones which do not have power in them\n    largeBatteries = largeBatteries.filter((battery) => !battery.isEmpty());\n\n    // Filter the solar panels and remove the ones with the minimum energy or empty\n    const solarPanelsFiltered = await this.filterSolarPanelsByEnergyAmount(\n      solarPanels,\n      date\n    );\n\n    // Create an array of the possible energy givers\n    const allEnergyProviders = [...solarPanelsFiltered, ...largeBatteries];\n\n    return await this.determineSupplyingPath(\n      smallBatteries,\n      allEnergyProviders,\n      shortestDistances,\n      date\n    );\n  }\n\n  /**\n   * This method is used for charging the individual buildings which might not have energy energy\n   * It calls the @method determineSupplyingPath which calculates which supplier can give these buildings power\n   * @returns @interface ResultingSupplyingPath which holds a key value pair of @interface supplyingPath requesting mapping to\n   * the one which can supplying, powerInput, and powerOutput\n   */\n  private async chargeBuildings(\n    shortestDistances: {\n      [source: string]: { [node: string]: Path };\n    },\n    date: Date\n  ): Promise<ResultingSupplyingPath> {\n    const gridItems = this.getGridItems();\n    let buildings: Building[] = gridItems[config.GRID_ITEM_NAMES.ENERGY_USER];\n    let smallBatteries: BioBattery[] =\n      gridItems[config.GRID_ITEM_NAMES.SMALL_BATTERY];\n    let largeBatteries: BioBattery[] =\n      gridItems[config.GRID_ITEM_NAMES.LARGE_BATTERY];\n    const solarPanels: SolarPanel[] =\n      gridItems[config.GRID_ITEM_NAMES.SOLAR_PANEL];\n\n    // Assuming that the houses asking for power will not have power in them.\n    // Do not consider building with full power capacity\n    buildings = buildings.filter((building) => {\n      return building.getEnergyInKilowattHour() === building.getMinCapacity();\n    });\n\n    // Filter the batteries and removes the ones which do not have power in them\n    // Do not include batteries which are empty\n    smallBatteries = smallBatteries.filter((battery) => !battery.isEmpty());\n    largeBatteries = largeBatteries.filter((battery) => !battery.isEmpty());\n\n    // Filter the solar panels and remove the ones with the minimum energy or empty\n    const solarPanelsFiltered = await this.filterSolarPanelsByEnergyAmount(\n      solarPanels,\n      date\n    );\n\n    // Create an array of the possible energy givers\n    const allEnergyProviders = [\n      ...smallBatteries,\n      ...solarPanelsFiltered,\n      ...largeBatteries,\n    ];\n\n    return await this.determineSupplyingPath(\n      buildings,\n      allEnergyProviders,\n      shortestDistances,\n      date\n    );\n  }\n\n  /**\n   * This method determines which grid item can supply energy to the grid item without it.\n   * It determines this by considering the needs of the grid item requesting the enrgy and\n   * minimizing the distance between the supplying grid items and the receiver. It returns a key pair of receiver to supplier\n   * @param recievingAgents holds a list of grid items (buildings or batteries but not both) which are requesting for energy\n   * @param supplyingAgents holds a list of grid items (@class BioBattery or @class SolarPanel)\n   * which can supply energy to @param recievingAgents\n   * @param shortestDistances holds an object of key, value pair of vertex -> adj vertices with their shortest distance to the key vertex\n   * @returns @interface ResultingSupplyingPath which holds a key value pair of @interface supplyingPath requesting mapping to\n   * the one which can supplying, powerInput, and powerOutput\n   */\n  private async determineSupplyingPath(\n    recievingAgents: config.RecievingAgents,\n    supplyingAgents: config.SupplyingAgents[],\n    shortestDistances: config.ShortestDistances,\n    date: Date\n  ): Promise<ResultingSupplyingPath> {\n    // Create an object of buildings with the energyProviders which supplied\n    const supplyToSupplyFromAgents: SupplyingPath = {};\n    let totalPowerInput = 0;\n    let totalPowerOutput = 0;\n    // Look at each gridItem requesting for energy individually and keep track of the which grid item\n    //  supplied it energy so that it can not be requested energy when it doesn't have it\n    for (const recievingAgent of recievingAgents) {\n      // get the energy which is being requested.\n      // TODO: advancement For now implement all or nothing. If battery doesn't have all the energy required, ignore it\n      // @see https://github.com/googleinterns/step141-2020/issues/54\n      const energyReq =\n        recievingAgent.getMaxCapacity() -\n        recievingAgent.getEnergyInKilowattHour();\n      let powerSupplied = 0;\n      // Get the voltage to be received\n      const voltageReq = config.calculateVoltageFromPower(\n        energyReq,\n        recievingAgent.gridItemResistance\n      );\n      // Set the shortest distance between the two values supplier and receiver to be +infinity\n      let shortestDistance = Number.POSITIVE_INFINITY;\n      // Keep track of the batteryPosition\n      let indexOfProvider = -1;\n      // Check which supplier can offer the receiver energy, by the minimzing it's distances between\n      // This has to change when you consider different sources giving the receiver energy\n      for (let index = 0; index < supplyingAgents.length; index++) {\n        // check the distance between the receiver and supplier. If it is the minimal, change the supplier index\n        const newShortestDistance =\n          shortestDistances[supplyingAgents[index].gridItemName][\n            recievingAgent.gridItemName\n          ].distance;\n\n        if (newShortestDistance < shortestDistance) {\n          // Calculate the resistance in the wires whose length is the shortest distance\n          const resistanceInWires = config.calculateResistance(\n            newShortestDistance\n          );\n          // calculate the resistance in all gridItems which are in the shortest path\n          const resistanceInGridItems = this.determineResistanceInShortestPath(\n            supplyingAgents[index].gridItemName,\n            recievingAgent.gridItemName,\n            shortestDistances\n          );\n          // The total resistance in the shortest path including the one for the gridItems in the shortest path\n          const totalResistance = resistanceInGridItems + resistanceInWires;\n          // Calculate the circuit current. The circuit here is in series which implies that the current is constant\n          const currentInCircuit = config.calculateCurrent(\n            voltageReq,\n            resistanceInGridItems,\n            resistanceInWires\n          );\n          // Using the current, calculate the power in the entire circuit\n          const energyProvided = config.calculatePowerWithCurrent(\n            currentInCircuit,\n            totalResistance\n          );\n          // Get the total energy which can be supplied by the supplying agent\n          let energyInSupplier: Energy;\n\n          if (\n            supplyingAgents[index].gridItemName.includes(\n              GRID_ITEM_NAMES.SOLAR_PANEL\n            )\n          ) {\n            energyInSupplier = await (supplyingAgents[\n              index\n            ] as SolarPanel).getEnergyInKilowattHour(date);\n          } else {\n            energyInSupplier = await Promise.resolve(\n              supplyingAgents[index].getEnergyInKilowattHour()\n            );\n          }\n          if (energyInSupplier >= energyProvided) {\n            shortestDistance = newShortestDistance;\n            indexOfProvider = index;\n            powerSupplied = energyProvided;\n          }\n        }\n      }\n      // In case there is no supplier for that receiver, ignore the receiver\n      // TODO advancement, tell the grid about these cases of receiver asking for more than it can be given\n      // @see https://github.com/googleinterns/step141-2020/issues/54\n      if (indexOfProvider === -1) {\n        continue;\n      }\n      // Update the power output and power input\n      totalPowerOutput += energyReq;\n      totalPowerInput += powerSupplied;\n      // Update the supplier so that it cannot be asked for power again when it shouldn't be asked\n      const provideFrom = supplyingAgents[indexOfProvider];\n      const provideTo = recievingAgent;\n\n      this.clonedGraph.setNode(provideFrom.gridItemName, provideFrom);\n      this.clonedGraph.setNode(provideTo.gridItemName, provideTo);\n\n      // Add the pair of receiver : supplier in supplyToSupplyFromAgents\n      supplyToSupplyFromAgents[recievingAgent.gridItemName] =\n        supplyingAgents[indexOfProvider].gridItemName;\n    }\n\n    return await {\n      supplyingPath: supplyToSupplyFromAgents,\n      inputPower: totalPowerInput,\n      outputPower: totalPowerOutput,\n    };\n  }\n\n  /**\n   * This method determmines which grid item is in the shortest path.\n   * @param start is the starting gridItem name in the shortestPath\n   * @param dest is gridItem name for the destination in the shortestPath\n   * @param shortestDistances holds an object of key, value pair of vertex -> adj vertices with their shortest distance to the key vertex\n   * @returns a list of the names for the gridItems in the shortestPath\n   */\n  private determineGridItemsInShortestPath(\n    start: string,\n    dest: string,\n    shortestDistances: config.ShortestDistances\n  ): string[] {\n    // Keeps track of the gridItems through which the power is going to pass\n    let gridItemsInShortestPath = [dest];\n    // Keeps track of the parent / predecessor of a vertex in the shortest distance path\n    let parent = shortestDistances[start][dest].predecessor;\n    while (parent !== start) {\n      gridItemsInShortestPath.push(parent);\n      parent = shortestDistances[start][parent].predecessor;\n    }\n    gridItemsInShortestPath.push(start);\n    return gridItemsInShortestPath;\n  }\n\n  /**\n   * This method determines the resistance of the gridItems in the shortest path.\n   * @param start is the starting gridItem name in the shortestPath\n   * @param dest is gridItem name for the destination in the shortestPath\n   * @param shortestDistances holds an object of key, value pair of vertex -> adj vertices with their shortest distance to the key vertex\n   * @returns the total resistance of the gridItems in the shortest path excluding the wires (shortest distance itself)\n   */\n  private determineResistanceInShortestPath(\n    start: string,\n    dest: string,\n    shortestDistances: config.ShortestDistances\n  ) {\n    const gridItemsInShortestPath = this.determineGridItemsInShortestPath(\n      start,\n      dest,\n      shortestDistances\n    );\n    let gridItemResistance = 0;\n    for (const gridItemName of gridItemsInShortestPath) {\n      const gridItem: GridItem = this.clonedGraph.node(gridItemName);\n      gridItemResistance += gridItem.gridItemResistance;\n    }\n    return gridItemResistance;\n  }\n\n  private async filterSolarPanelsByEnergyAmount(\n    solarPanels: SolarPanel[],\n    date: Date\n  ): Promise<SolarPanel[]> {\n    const solarPanelsFiltered = [];\n    for (let i = 0; i < solarPanels.length; i++) {\n      const solarPanel = solarPanels[i];\n      if (!(await solarPanel.isEmpty(date))) {\n        solarPanelsFiltered.push(solarPanel);\n      }\n    }\n    return solarPanelsFiltered;\n  }\n}\n","export * from './solar-panel';\n","import { WeatherLib } from '@biogrid/weather';\nimport { EnergySource, EnergySourceParams } from './bioenergy-source';\nimport {\n  Validatable,\n  validate,\n  Power,\n  CloudCoverage,\n} from '@biogrid/grid-simulator';\nimport { SOLAR_PANEL, RESISTANCE } from '../config';\n\nexport interface SolarPanelParams extends EnergySourceParams {\n  areaSquareMeters: number,\n  gridItemName: string,\n  date?: Date,\n}\n\nexport class SolarPanel extends EnergySource {\n  private areaSquareMeters: number;\n  // This is unique to every single solar panel but all have a same prefix name\n  gridItemName: string;\n  private date: Date;\n  private weatherLib: WeatherLib;\n  gridItemResistance: number = RESISTANCE.SOLAR_PANEL;\n  /**\n   * @param efficiency - default to 17.5% efficiency as solar panels are often between 15% and 20% efficiency\n   */\n  constructor(solarPanelParams: SolarPanelParams) {\n    super(solarPanelParams);\n    if (!this.validateInputsSolarPanel(solarPanelParams.areaSquareMeters)) {\n      throw new Error(\n        `Cannot create a solar panel object with values of area ${solarPanelParams.areaSquareMeters}`\n      );\n    }\n    this.areaSquareMeters = solarPanelParams.areaSquareMeters;\n    this.gridItemName = solarPanelParams.gridItemName;\n    this.date = solarPanelParams.date ? solarPanelParams.date : new Date();\n    this.weatherLib = new WeatherLib(this.date, this.longitude, this.latitude);\n  }\n\n  private validateInputsSolarPanel(area: number) {\n    const validator: Validatable = {\n      value: area,\n      isPositive: area >= 0,\n    };\n    return validate(validator);\n  }\n\n  async getPowerAmount(date: Date): Promise<Power> {\n    if (!this.weatherLib.isSetup()) {\n      await this.weatherLib.setup();\n    }\n    // Solar panels do not produce energy at night\n    if (!this.weatherLib.isDay(date)) {\n      return 0;\n    }\n    const cloudCoverage = this.weatherLib.getCloudCoverage(date);\n    const powerPerSqrMeter = this.cloudCoverageToKiloWattsPerSquareMeter(\n      cloudCoverage\n    );\n    return powerPerSqrMeter * this.areaSquareMeters * this.efficiency;\n  }\n\n  supplyPower(requiredPower: Power): Power {\n    // TODO implement this when you return the amount of power\n    // TODO that the solar panel holds at the particular moment\n    // subtract requiredPower from the current and return it, keep track of the remaining power\n    return requiredPower;\n  }\n\n  /**\n   * This method returns the current power that can be generated by\n   * the solar panel at that given time\n   */\n  async getEnergyInKilowattHour(date?: Date): Promise<Power> {\n    return await this.getPowerAmount(date || this.date);\n  }\n\n  async isEmpty(date: Date) {\n    return (await this.getEnergyInKilowattHour(date)) === 0;\n  }\n\n  private cloudCoverageToKiloWattsPerSquareMeter(cloudCoverage: CloudCoverage) {\n    // CalculationDerived from https://scool.larc.nasa.gov/lesson_plans/CloudCoverSolarRadiation.pdf\n    return (\n      (SOLAR_PANEL.CLEAR_SKY_POWER_WATTS *\n        (1 -\n          SOLAR_PANEL.CLOUD_COVERAGE_SCALING_CONSTANT *\n            Math.pow(cloudCoverage, 3))) /\n      1000\n    );\n  }\n}\n","export * from './lib/weather';\n","import { SunlightIntensity, CloudCoverage } from '@biogrid/grid-simulator';\nimport fetch from 'node-fetch';\n\n// TODO put api keys into their own lib\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst apiKey = require('./api-key.json');\n\ninterface WeatherHour {\n  cloudCoverage: CloudCoverage;\n  isDay: boolean;\n}\ninterface WeatherHourMap {\n  [formattedDate: string]: WeatherHour;\n}\n\nexport class WeatherLib {\n  private day: Date;\n  private longitude: number;\n  private latitude: number;\n  private weatherData: WeatherHourMap;\n  private setupOccured: boolean;\n\n  constructor(day: Date, longitude: number, latitude: number) {\n    this.day = day;\n    this.longitude = longitude;\n    this.latitude = latitude;\n    this.weatherData = {};\n    this.setupOccured = false;\n  }\n  async setup() {\n    const url = `http://api.weatherapi.com/v1/history.json?key=${\n      apiKey.weatherapi\n    }&q=${this.latitude},${this.longitude}&dt=${this.formatDate(this.day)}`;\n\n    const ret = await fetch(url);\n    const body = await ret.json();\n    this.weatherData = body.forecast.forecastday[0].hour\n      .map((period: any) => {\n        return {\n          time: this.formatDateWithHour(new Date(period.time)),\n          cloudCoverage: period.cloud / 100,\n          isDay: period.is_day === 1,\n        };\n      })\n      .reduce((map: WeatherHourMap, obj: WeatherHour & { time: string }) => {\n        map[obj.time] = {\n          cloudCoverage: obj.cloudCoverage,\n          isDay: obj.isDay,\n        };\n        return map;\n      }, {});\n\n    this.setupOccured = true;\n  }\n\n  isSetup() {\n    return this.setupOccured;\n  }\n\n  getCloudCoverage(date: Date): CloudCoverage {\n    const dateFormatted = this.formatDateWithHour(date);\n    if (!this.weatherData[dateFormatted]) {\n      throw new Error(\n        `Date ${dateFormatted} not found within the specified time range`\n      );\n    }\n    return this.weatherData[dateFormatted].cloudCoverage;\n  }\n\n  isDay(date: Date): boolean {\n    const dateFormatted = this.formatDateWithHour(date);\n    if (!this.weatherData[dateFormatted]) {\n      throw new Error(\n        `Date ${dateFormatted} not found within the specified time range`\n      );\n    }\n    return this.weatherData[dateFormatted].isDay;\n  }\n\n  private formatDateWithHour(date: Date): string {\n    return `${this.formatDate(date)}:${date.getHours()}`;\n  }\n\n  private formatDate(date: Date): string {\n    let d = new Date(date),\n      month = `${d.getMonth() + 1}`,\n      day = `${d.getDate()}`,\n      year = d.getFullYear();\n\n    if (month.length < 2) month = `0${month}`;\n    if (day.length < 2) day = `0${day}`;\n\n    return [year, month, day].join('-');\n  }\n}\n","module.exports = require(\"node-fetch\");","import { Power, ItemPosition, Distance } from '@biogrid/grid-simulator';\nimport {\n  Validatable,\n  validate,\n  EnergySourceInterface,\n} from '@biogrid/grid-simulator';\n\nexport interface EnergySourceParams {\n  x: Distance,\n  y: Distance,\n  efficiency: number,\n  longitude?: number,\n  latitude?: number,\n}\n\nexport abstract class EnergySource implements EnergySourceInterface {\n  // Percentage between 0 and 1\n  protected efficiency: number;\n  // Long and latitude for the solar panel's position\n  protected longitude = 0;\n  protected latitude = 0;\n  protected position: ItemPosition;\n  constructor(energyParams: EnergySourceParams) {\n    this.position = { x: energyParams.x, y: energyParams.y };\n    if (!this.validateInputs(energyParams.efficiency)) {\n      throw new Error(\n        `Cannot create a solar panel object with values: (${energyParams.efficiency})`\n      );\n    }\n    this.efficiency = energyParams.efficiency;\n    if (energyParams.longitude) {\n      this.longitude = energyParams.longitude;\n    }\n    if (energyParams.latitude) {\n      this.latitude = energyParams.latitude;\n    }\n  }\n\n  private validateInputs(efficiency: number) {\n    const efficiencyValidator: Validatable = {\n      value: efficiency,\n      min: 0,\n      max: 1,\n      isPositive: efficiency >= 0,\n    };\n    return validate(efficiencyValidator);\n  }\n\n  getRelativePosition() {\n    return this.position;\n  }\n\n  abstract getPowerAmount(date: Date): Promise<Power>;\n  abstract getEnergyInKilowattHour(date?: Date): Promise<Power>;\n  abstract gridItemName: string;\n  abstract gridItemResistance: number;\n}\n","export * from './biogrid-class'\n","import {\n  Grid,\n  GridAction,\n  GridOptions,\n  Town,\n  TownSize,\n  ItemPosition,\n  Energy,\n  Battery,\n  GridItem,\n  Distance,\n  Power,\n} from '@biogrid/grid-simulator';\nimport * as bioconstants from '../config/bio-constants';\nimport {\n  BioBattery,\n  BiogridState,\n  Building,\n  SolarPanel,\n  SolarPanelParams,\n} from '@biogrid/biogrid-simulator';\nimport { Graph } from 'graphlib';\nimport { EnergySource } from '../bioenergy-source/bioenergy-source';\nimport { BatteryParams } from '../biobattery';\n\nexport interface BiogridOptions extends GridOptions {\n  numberOfSmallBatteryCells: number;\n  numberOfLargeBatteryCells: number;\n  numberOfSolarPanels: number;\n  startDate?: Date;\n}\n\nexport class Biogrid implements Grid {\n  // TODO create a singleton for the Biogrid not BiogridState\n  private state: BiogridState;\n\n  // The date for when the simulation begins\n  // Used in initializing the Solar Panels\n  private startDate: Date;\n\n  // All details for the batteries in the grid\n  // The small batteries in the grid, will approximately have a maxCapacity of 13,500KJ\n  private smallBatteries: Battery[];\n  // The large batteries in the grid, will approximately have a maxCapacity of 540,000KJ\n  private largeBatteries: Battery[];\n\n  // A dictionary with the position as its key\n  // Used to keep track of whether an item is already placed in a position\n  private itemInPosition: { [positionString: string]: boolean } = {};\n  // All details for the source of energy\n  private solarPanels: EnergySource[];\n\n  // Holds the efficiency of the grid\n  private efficiency: number;\n\n  constructor(private town: Town, opts: BiogridOptions) {\n    const todayMidnight = new Date();\n    todayMidnight.setHours(0);\n    this.startDate = opts.startDate || todayMidnight;\n    // Batteries\n    const smallBatteryPositions = this.createGridItemPositions(\n      town.getTownSize(),\n      opts.numberOfSmallBatteryCells\n    );\n    const largeBatteryPositions = this.createGridItemPositions(\n      town.getTownSize(),\n      opts.numberOfLargeBatteryCells\n    );\n\n    this.smallBatteries = this.createBatteries(\n      smallBatteryPositions,\n      bioconstants.GRID_ITEM_NAMES.SMALL_BATTERY\n    );\n    this.largeBatteries = this.createBatteries(\n      largeBatteryPositions,\n      bioconstants.GRID_ITEM_NAMES.LARGE_BATTERY\n    );\n\n    // Enery Source\n    const solarPanelPositions = this.createGridItemPositions(\n      town.getTownSize(),\n      opts.numberOfSolarPanels\n    );\n    this.solarPanels = this.createSolarPanels(solarPanelPositions);\n\n    this.state = new BiogridState(this.createGridItems(), town.getTownSize());\n    // Set the effieciency to 0 at the beginning\n    this.efficiency = 0;\n  }\n\n  private createGridItems(): GridItem[] {\n    return [\n      ...this.smallBatteries,\n      ...this.largeBatteries,\n      ...this.town.getEnergyUsers(),\n      ...this.solarPanels,\n    ];\n  }\n\n  getTownSize() {\n    return this.town.getTownSize();\n  }\n\n  getSystemState() {\n    return this.state;\n  }\n\n  getEfficiency() {\n    return this.efficiency;\n  }\n\n  getJsonGraphDetails() {\n    return this.state.getJsonGraph();\n  }\n\n  private createBatteries(\n    positions: ItemPosition[],\n    gridItemName: string\n  ): Battery[] {\n    const batteryResistance =\n      gridItemName === bioconstants.GRID_ITEM_NAMES.LARGE_BATTERY\n        ? bioconstants.RESISTANCE.LARGE_BATTERY\n        : bioconstants.RESISTANCE.SMALL_BATTERY;\n    const maxCapacity =\n      gridItemName === bioconstants.GRID_ITEM_NAMES.LARGE_BATTERY\n        ? bioconstants.LARGE_BATTERY.MAX_CAPACITY\n        : bioconstants.SMALL_BATTERY.MAX_CAPACITY;\n    const initEnergy =\n      gridItemName === bioconstants.GRID_ITEM_NAMES.LARGE_BATTERY\n        ? bioconstants.LARGE_BATTERY.DEFAULT_START_ENERGY\n        : bioconstants.SMALL_BATTERY.DEFAULT_START_ENERGY;\n    return positions.map(\n      (position, index) =>\n        new BioBattery({\n          x: position.x,\n          y: position.y,\n          gridItemName: `${gridItemName}-${index}`,\n          gridItemResistance: batteryResistance,\n          energyInKiloWattHour: initEnergy,\n          maxCapacity,\n        } as BatteryParams)\n    );\n  }\n\n  /**\n   * This method creates a list of solar panels placed depending on their positions\n   * @param positions holds the positions where the solar panels are going to be placed\n   */\n  // TODO pass a list of equal length to hold the area for the solar panels\n  private createSolarPanels(positions: ItemPosition[]): EnergySource[] {\n    return positions.map(\n      (position, index) =>\n        new SolarPanel({\n          x: position.x,\n          y: position.y,\n          efficiency: 0.75,\n          areaSquareMeters: bioconstants.SOLAR_PANEL.AREA,\n          gridItemName: `${bioconstants.GRID_ITEM_NAMES.SOLAR_PANEL}-${index}`,\n          date: this.startDate,\n        } as SolarPanelParams)\n    );\n  }\n\n  /**\n   * Drain the energy users according to the time of day\n   */\n  updateEnergyUsage(date: Date) {\n    this.town.getEnergyUsers().forEach((energyUser) => {\n      energyUser.decreaseEnergyAccordingToTimeOfDay(date);\n    });\n  }\n\n  /**\n   * This method takes the results of th brain and then it changes the state graph as suggested by the brain.\n   * The results of the brain are in form of an object key:value pair, with the receiver gridItemName as key and supplier gridItemName as value\n   * @param action holds the results from the brain\n   * @returns a the current state with a new graph which includes the changes that were suggested by the brain\n   */\n  takeAction(action: GridAction) {\n    const powerEdges: { v: string; w: string; power: Power }[] = [];\n    // Set new efficiency\n    this.efficiency = action.getEfficiency();\n    // RETURN a new BiogridState\n    const allSupplyingPaths = action.getSupplyingPaths();\n    this.state.resetPowerOnEdges();\n    const clonedGraph = this.state.cloneStateGraph();\n    for (const supplyPath in allSupplyingPaths) {\n      const oldGridItem = this.state.getGridItem(supplyPath);\n      // take energy from the supplying grid item and transfer it to the energy user\n      const supplyingGridItem = this.state.getGridItem(\n        allSupplyingPaths[supplyPath]\n      );\n      const typeOldGridItem = this.getGridItemType(oldGridItem);\n      const energyUser = oldGridItem as Building | BioBattery;\n      const energyUserReq =\n        energyUser.getMaxCapacity() - energyUser.getEnergyInKilowattHour();\n      const typeSupplyingGridItem = this.getGridItemType(supplyingGridItem);\n      if (typeOldGridItem === bioconstants.GRID_ITEM_NAMES.ENERGY_USER) {\n        if (\n          typeSupplyingGridItem === bioconstants.GRID_ITEM_NAMES.LARGE_BATTERY ||\n          typeSupplyingGridItem === bioconstants.GRID_ITEM_NAMES.SMALL_BATTERY\n        ) {\n          const battery = supplyingGridItem as BioBattery;\n          battery.supplyPower(energyUserReq);\n          clonedGraph.setNode(battery.gridItemName, battery);\n        } else if (\n          typeSupplyingGridItem === bioconstants.GRID_ITEM_NAMES.SOLAR_PANEL\n        ) {\n          const solarpanel = supplyingGridItem as SolarPanel;\n          solarpanel.supplyPower(energyUserReq);\n          clonedGraph.setNode(solarpanel.gridItemName, solarpanel);\n        } else {\n          continue;\n        }\n        (energyUser as Building).increaseEnergy(energyUserReq);\n        clonedGraph.setNode(energyUser.gridItemName, energyUser);\n      } else if (typeOldGridItem === bioconstants.GRID_ITEM_NAMES.SMALL_BATTERY) {\n        if (typeSupplyingGridItem === bioconstants.GRID_ITEM_NAMES.LARGE_BATTERY) {\n          const battery = supplyingGridItem as BioBattery;\n          battery.supplyPower(energyUserReq);\n          clonedGraph.setNode(battery.gridItemName, battery);\n        } else if (\n          typeSupplyingGridItem === bioconstants.GRID_ITEM_NAMES.SOLAR_PANEL\n        ) {\n          const solarpanel = supplyingGridItem as SolarPanel;\n          solarpanel.supplyPower(energyUserReq);\n          clonedGraph.setNode(solarpanel.gridItemName, solarpanel);\n        } else {\n          continue;\n        }\n        (energyUser as BioBattery).startCharging(energyUserReq);\n        clonedGraph.setNode(energyUser.gridItemName, energyUser);\n      } else if (typeOldGridItem === bioconstants.GRID_ITEM_NAMES.LARGE_BATTERY) {\n        if (typeSupplyingGridItem === bioconstants.GRID_ITEM_NAMES.SOLAR_PANEL) {\n          const solarpanel = supplyingGridItem as SolarPanel;\n          solarpanel.supplyPower(energyUserReq);\n        } else {\n          continue;\n        }\n        (energyUser as BioBattery).startCharging(energyUserReq);\n        clonedGraph.setNode(energyUser.gridItemName, energyUser);\n      }\n      powerEdges.push({\n        v: supplyingGridItem.gridItemName,\n        w: energyUser.gridItemName,\n        // Convert kilowatthours into kilowatts\n        power: energyUserReq / bioconstants.TIME.DISCRETE_UNIT_HOURS,\n      });\n    }\n    this.state.setnewStateGraph(clonedGraph);\n    powerEdges.forEach((powerEdge) => {\n      this.state.setPowerBetweenNodes(\n        powerEdge.v,\n        powerEdge.w,\n        powerEdge.power\n      );\n    });\n    return this.state;\n  }\n\n  private getGridItemType(gridItem: GridItem): string {\n    if (\n      gridItem.gridItemName.includes(bioconstants.GRID_ITEM_NAMES.ENERGY_USER)\n    ) {\n      return bioconstants.GRID_ITEM_NAMES.ENERGY_USER;\n    } else if (\n      gridItem.gridItemName.includes(bioconstants.GRID_ITEM_NAMES.SMALL_BATTERY)\n    ) {\n      return bioconstants.GRID_ITEM_NAMES.SMALL_BATTERY;\n    } else if (\n      gridItem.gridItemName.includes(bioconstants.GRID_ITEM_NAMES.LARGE_BATTERY)\n    ) {\n      return bioconstants.GRID_ITEM_NAMES.LARGE_BATTERY;\n    } else if (\n      gridItem.gridItemName.includes(bioconstants.GRID_ITEM_NAMES.SOLAR_PANEL)\n    ) {\n      return bioconstants.GRID_ITEM_NAMES.SOLAR_PANEL;\n    }\n    return bioconstants.GRID_ITEM_NAMES.GRID;\n  }\n\n  /**\n   * A simplified algorithm to (mostly) evenly space out batteries throughout the square town\n   * Split the town into rows and columns and then place a battery in the center of each cell\n   * TODO: have a smart algorithm for placement, see https://github.com/googleinterns/step141-2020/issues/42\n   */\n  private createGridItemPositions(\n    townSize: TownSize,\n    numberOfGridItems: number\n  ): ItemPosition[] {\n    const cols = Math.ceil(numberOfGridItems / townSize.width);\n    const rows = Math.ceil(numberOfGridItems / cols);\n    const positions: ItemPosition[] = [];\n    for (let i = 0; i < numberOfGridItems; i++) {\n      const newPositionUnverified = {\n        x: this.roundToGridDistance(\n          (((i % cols) + 0.5) / cols) * townSize.width\n        ),\n        y: this.roundToGridDistance(\n          ((Math.floor(i / cols) + 0.5) / rows) * townSize.height\n        ),\n      };\n      const newPosition = this.findNearestUnoccupiedPosition(\n        newPositionUnverified,\n        townSize\n      );\n      positions.push(newPosition);\n      this.itemInPosition[this.formatItemPosition(newPosition)] = true;\n    }\n    return positions;\n  }\n\n  /**\n   * Find the nearest unoccupied position to {@code pos} by looking looking in a spiral with pos at its center\n   * First the space immediately right of pos is checked, then the one above, then to the left, then below, then two right spaces out, two right up, etc\n   */\n  private findNearestUnoccupiedPosition(\n    pos: ItemPosition,\n    townSize: TownSize\n  ): ItemPosition {\n    let radius = bioconstants.GRID_DISTANCES.INCREMENTS_KM;\n    let angle = 0;\n    let outOfBoundsCount = 0;\n    let xOffset = 0,\n      yOffset = 0;\n    let newPos = { x: pos.x + xOffset, y: pos.y + yOffset };\n    // If {@code outOfBoundsCount} is greater than 3, then that means the upwards, left, right, and down\n    // Are all out of bounds. Thus there is no where left to place the item\n    while (\n      (this.positionOutOfBounds(newPos, townSize) ||\n        this.positionOccupied(newPos)) &&\n      outOfBoundsCount <= 3\n    ) {\n      if (this.positionOutOfBounds(newPos, townSize)) {\n        outOfBoundsCount++;\n      }\n      switch (angle) {\n        case 0:\n          yOffset = 0;\n          xOffset = radius;\n          break;\n        case 90:\n          xOffset = 0;\n          yOffset = radius;\n          break;\n        case 180:\n          xOffset = -1 * radius;\n          yOffset = 0;\n          break;\n        case 270:\n          xOffset = 0;\n          yOffset = -1 * radius;\n          break;\n      }\n      newPos = { x: pos.x + xOffset, y: pos.y + yOffset };\n      // Increment the angle by 90 degrees\n      angle = angle + 90;\n      if (angle === 360) {\n        radius += bioconstants.GRID_DISTANCES.INCREMENTS_KM;\n        // Reset the angle\n        angle = 0;\n      }\n    }\n    if (outOfBoundsCount > 3) {\n      throw new Error(\n        `There are too many items on the grid. New items could not be placed with a minimum distance of ${bioconstants.GRID_DISTANCES.INCREMENTS_KM} km apart`\n      );\n    }\n    return newPos;\n  }\n\n  private positionOutOfBounds(pos: ItemPosition, townSize: TownSize): boolean {\n    return pos.x > townSize.width || pos.y > townSize.height;\n  }\n\n  private roundToGridDistance(distance: Distance): Distance {\n    return (\n      Math.floor(distance / bioconstants.GRID_DISTANCES.INCREMENTS_KM) *\n      bioconstants.GRID_DISTANCES.INCREMENTS_KM\n    );\n  }\n\n  private positionOccupied(pos: ItemPosition): boolean {\n    return this.itemInPosition[this.formatItemPosition(pos)];\n  }\n\n  /**\n   * Convert an item into a string\n   */\n  private formatItemPosition(pos: ItemPosition): string {\n    return `${pos.x}, ${pos.y}`;\n  }\n}\n","export * from './biogrid-action-class'\n","import { GridAction, SupplyingPath } from '@biogrid/grid-simulator';\n\nexport class BiogridAction implements GridAction {\n  constructor(\n    private supplyPath: SupplyingPath,\n    private efficiency: number\n  ) {}\n  public getSupplyingPaths() {\n    return this.supplyPath;\n  }\n  public getEfficiency() {\n    return this.efficiency;\n  }\n}\n","export * from './biogrid-state-class';\nexport * from './main-grid-item';\n","import * as graphlib from 'graphlib';\nimport {\n  StateGraphVertex,\n  StateGraph,\n  StateGraphEdge,\n  Distance,\n  ItemPosition,\n  GridItem,\n  Power,\n  TownSize,\n} from '@biogrid/grid-simulator';\nimport { GRID_ITEM_NAMES, ShortestDistances, RESISTANCE } from '../config';\nimport { MAIN_GRID } from './main-grid-item';\n\ninterface EdgeLabel {\n  distance: number;\n  power?: Power;\n}\n\nexport class BiogridState implements StateGraph {\n  private graph: graphlib.Graph;\n\n  // TODO think about implement it StateGraphVertex[] as an object of key: name -> value: StateGraphVertex\n  constructor(vertices: StateGraphVertex[], private townSize: TownSize) {\n    // Directed so as to have two edges between A and B, but in opposite directions\n    this.graph = new graphlib.Graph({ directed: true });\n\n    // Initialize the graph with a grid which is a gridItem and has position (0, 0) to keep track of where the items are placed on the map\n    const grid: GridItem = new MAIN_GRID(townSize);\n    this.graph.setNode(grid.gridItemName, (grid as GridItem));\n\n    // Add all the vertices as nodes/vertices of the graph, with a name for\n    // the particular grid item and label which is data for the particular vertex as the GridItem itself\n    vertices.map((vertex) =>\n      this.graph.setNode(vertex.gridItemName, vertex as GridItem)\n    );\n\n    // Add all the edges that can be formed into the graph, read the add method for how it is done\n    vertices.map((vertex) => this.connectNewVertex(vertex));\n  }\n\n  /**\n   * Method to return the graph for the states of the grid\n   */\n  public getGraph() {\n    return this.graph;\n  }\n\n  /**\n   * cloneStateGraph is used to clone the graph for use in the brain.\n   */\n  public cloneStateGraph(): graphlib.Graph {\n    return graphlib.json.read(graphlib.json.write(this.graph));\n  }\n\n  /**\n   * getJsonGraph returns the json details of the graph\n   */\n  public getJsonGraph() {\n    return graphlib.json.write(this.graph);\n  }\n\n  /**\n   * setnewStateGraph sets a new graph for the state of the grid after any changes\n   * @param newGraph holds the new state graph for the grid\n   */\n  public setnewStateGraph(newGraph: graphlib.Graph) {\n    this.graph = newGraph;\n  }\n\n  /**\n   * Set power between the nodes via the edges of the state graph\n   */\n  public setPowerBetweenNodes(v: string, w: string, power: Power) {\n    const labelFromV: EdgeLabel = this.graph.edge(v, GRID_ITEM_NAMES.GRID);\n    const labelToW: EdgeLabel = this.graph.edge(GRID_ITEM_NAMES.GRID, w);\n    this.graph.setEdge(v, GRID_ITEM_NAMES.GRID, {\n      distance: labelFromV.distance,\n      power,\n    });\n    this.graph.setEdge(GRID_ITEM_NAMES.GRID, w, {\n      distance: labelToW.distance,\n      power,\n    });\n  }\n\n  /**\n   * Set all edge power to 0\n   */\n  public resetPowerOnEdges() {\n    const edges = this.graph.edges();\n    edges.forEach((edge) => this.resetEdge(edge));\n  }\n\n  /**\n   * Method finds all the vertices in the graph and returns tehir names\n   * @returns the names of the vertices / gridItems in the grid\n   */\n  public getAllVertices(): string[] {\n    return this.graph.nodes();\n  }\n\n  /**\n   * Method searches the graph for a specific node by its name\n   * @param gridItemName is the string that represents the GridItem you are searching for\n   */\n  public getGridItem(gridItemName: string): GridItem {\n    return this.graph.node(gridItemName);\n  }\n\n  /**\n   * getAllGridItems searches the graph vertices and retrives the gridItems which are stored on the vertices\n   */\n  public getAllGridItems(): GridItem[] {\n    return this.getAllVertices().map((vertexName) =>\n      this.getGridItem(vertexName)\n    );\n  }\n\n  /**\n   * Method returns the shortest distance from every edge to the all the other edges\n   * @returns the shortest distance from any edge to the other edges\n   */\n  public getShortestDistances(): ShortestDistances {\n    return graphlib.alg.dijkstraAll(\n      this.graph,\n      this.getWeightbyGraph(this.graph)\n    );\n  }\n\n  private getWeightbyGraph(graph: graphlib.Graph) {\n    return function (edge: graphlib.Edge): Distance {\n      return graph.edge(edge).distance;\n    };\n  }\n\n  /**\n   * Reset an edge by changing its power to 0\n   */\n  private resetEdge(edge: graphlib.Edge): void {\n    const labels = this.graph.edge(edge);\n    this.graph.setEdge(edge.v, edge.w, {\n      distance: labels.distance,\n      power: 0,\n    });\n  }\n\n  /**\n   * When given a specific edge, return the weight or distance between the two vertices\n   * @param edge is the Edge of the graph which you would like to get\n   * @returns the weight or the distance between the vertices of @param edge\n   */\n  public getWeightEdge(edge: graphlib.Edge): Distance {\n    return this.graph.edge(edge).distance;\n  }\n\n  /**\n   * Get all GridItem positions in the graph\n   */\n  public getAllPositions(): ItemPosition[] {\n    return (this.graph.nodes() as string[]).map((vertex) =>\n      this.getGridItem(vertex).getRelativePosition()\n    );\n  }\n\n  /**\n   * Add Edge when there is supposed to be an edge\n   * Add edges from the grid, to the every other part of the grid except solar panels\n   * Add reverse edges from the batteries to the grid\n   * Add edge from solar panels to the grid, not the reverse\n   * | symbol means a connection either from top - down, or down - top\n   *                                     FROM GRID----->building<----------------------------------->building<---FROM GRID\n   *                                                     ^--|                                   |------^\n   *                                                        |----------S.SMALL_BATTERY----------|\n   *                                                                               ^-----|\n   *                  L.LARGE_BATTERY<------------------------------------>GRID<---------|\n   *                            FROM SOLAR PANEL TO GRID (from down)--------| |----FROM SOLAR PANEL TO GRID (from down)\n   *                                                  SOLAR_PANEL---------->| |<--------------SOLAR_PANEL\n   * @param newVertex is the new item of the Grid to add to @param this.graph as displayed above\n   */\n  private connectNewVertex(newVertex: GridItem) {\n    const newVertexName = newVertex.gridItemName;\n    for (const vertex of this.graph.nodes()) {\n      const distance = this.calculateDistance(\n        newVertex,\n        this.graph.node(vertex) as StateGraphVertex\n      );\n      let edge: StateGraphEdge;\n      // Solar panels to the grid only\n      // Searching for includes GRID so that when scaling it is easy to add multiple grids\n      if (\n        newVertexName.includes(GRID_ITEM_NAMES.SOLAR_PANEL) &&\n        vertex.includes(GRID_ITEM_NAMES.GRID)\n      ) {\n        edge = { v: newVertexName, w: vertex, weight: distance };\n      } else if (\n        newVertexName.includes(GRID_ITEM_NAMES.LARGE_BATTERY) &&\n        vertex.includes(GRID_ITEM_NAMES.GRID)\n      ) {\n        edge = { v: newVertexName, w: vertex, weight: distance };\n        // Add the opposite edge from grid to battery\n        this.graph.setEdge(vertex, newVertexName, { distance });\n      } else if (newVertexName.includes(GRID_ITEM_NAMES.SMALL_BATTERY)) {\n        if (vertex.includes(GRID_ITEM_NAMES.GRID)) {\n          edge = { v: newVertexName, w: vertex, weight: distance };\n          // Add the opposite edge from grid to battery\n          this.graph.setEdge(vertex, newVertexName, { distance });\n        } else if (vertex.includes(GRID_ITEM_NAMES.ENERGY_USER)) {\n          edge = { v: newVertexName, w: vertex, weight: distance };\n        } else {\n          // Continue since there is no edge to create\n          continue;\n        }\n      }\n      // On gridItem Energy User do not add edge (A, A)\n      else if (\n        newVertexName.includes(GRID_ITEM_NAMES.ENERGY_USER) &&\n        vertex !== newVertexName\n      ) {\n        if (\n          vertex.includes(GRID_ITEM_NAMES.GRID) ||\n          vertex.includes(GRID_ITEM_NAMES.SMALL_BATTERY)\n        ) {\n          edge = { v: vertex, w: newVertexName, weight: distance };\n        } else if (vertex.includes(GRID_ITEM_NAMES.ENERGY_USER)) {\n          edge = { v: newVertexName, w: vertex, weight: distance };\n          // Add the reverse edge from the new energy user/ building to the other building\n          this.graph.setEdge(vertex, newVertexName, { distance });\n        } else {\n          // Continue since there is no edge to create\n          continue;\n        }\n      } else {\n        // Do not connect the parts of the grid which don't have to be connected\n        continue;\n      }\n      this.graph.setEdge(edge.v, edge.w, { distance: edge.weight });\n    }\n  }\n\n  /**\n   * Calculate distance via Pythagorean's theorem\n   */\n  private calculateDistance(v1: StateGraphVertex, v2: StateGraphVertex) {\n    return Math.sqrt(\n      Math.pow(v1.getRelativePosition().x - v2.getRelativePosition().x, 2) +\n        Math.pow(v1.getRelativePosition().y - v2.getRelativePosition().y, 2)\n    );\n  }\n}\n","export * from './building'\n","import {\n  EnergyUser,\n  ItemPosition,\n  Distance,\n  Energy,\n} from '@biogrid/grid-simulator';\nimport { BUILDING, RESISTANCE } from '../config';\n\nexport interface BuildingParams {\n  energy: number;\n  x: Distance;\n  y: Distance;\n  gridItemName: string;\n  minCapacity?: Energy;\n  maxCapacity?: Energy;\n}\n\n// TODO rename energy to power consumption\n/**\n * A structure such as a building or house which uses energy to operate.\n */\nexport class Building implements EnergyUser {\n  private energyInKilowattHour: number;\n  // Initial id value, will be changed by rural area.\n  private buildingId = -1;\n  // Label to be used in the graph\n  gridItemName: string;\n  // /** The battery storage for the building. */\n  // battery: Battery;\n  private relativePosition: ItemPosition;\n  /** Defines the resistance of the building due to the wiring */\n  gridItemResistance = RESISTANCE.BUILDING;\n\n  private readonly minCapacity: Energy = BUILDING.MIN_CAPACITY;\n  private readonly maxCapacity: Energy = BUILDING.MAX_CAPACITY;\n\n  /**\n   * @param {number} energy Amount of energy the building will have in joules.\n   */\n  constructor(buildingParams: BuildingParams) {\n    this.relativePosition = { x: buildingParams.x, y: buildingParams.y };\n    this.gridItemName = buildingParams.gridItemName;\n    if (this.isPositive(buildingParams.energy)) {\n      this.energyInKilowattHour = buildingParams.energy;\n    } else {\n      throw new Error(\"Can't create a building with negative energy!\");\n    }\n    if (buildingParams.minCapacity) {\n      this.minCapacity = buildingParams.minCapacity;\n    }\n    if (buildingParams.maxCapacity) {\n      this.maxCapacity = buildingParams.maxCapacity;\n    }\n  }\n\n  getMinCapacity(): Energy {\n    return this.minCapacity;\n  }\n\n  getMaxCapacity(): Energy {\n    return this.maxCapacity;\n  }\n\n  getRelativePosition(): ItemPosition {\n    return this.relativePosition;\n  }\n\n  private isPositive(energy: number): boolean {\n    return energy >= 0;\n  }\n\n  getBuildingId(): number {\n    return this.buildingId;\n  }\n\n  setBuildingId(Id: number) {\n    this.buildingId = Id;\n  }\n\n  getEnergyInKilowattHour(): number {\n    return this.energyInKilowattHour;\n  }\n\n  decreaseEnergyAccordingToTimeOfDay(date: Date) {\n    const energyUsed = this.getAverageEnergyUsagePerDay(date.getHours());\n    this.decreaseEnergy(energyUsed);\n  }\n\n  /**\n   * This method adds energy to the current building's power.\n   */\n  increaseEnergy(energy: number) {\n    if (this.isPositive(energy)) {\n      this.energyInKilowattHour += energy;\n    } else {\n      throw new Error(\"Can't add negative energy!\");\n    }\n  }\n\n  /**\n   * This method uses energy from the current building's power.\n   */\n  decreaseEnergy(energy: number) {\n    if (!this.isPositive(energy)) {\n      throw new Error(\"Can't use a negative amount of energy!\");\n    }\n    // Building can't have a negative amount of energy in store.\n    if (energy >= this.energyInKilowattHour) {\n      this.energyInKilowattHour = 0;\n    } else {\n      this.energyInKilowattHour -= energy;\n    }\n  }\n\n  private getAverageEnergyUsagePerDay(hourOfDay: number): Energy {\n    return BUILDING.ENERGY_USAGE_KILOWATT_BY_TIME_OF_DAY[hourOfDay.toString()];\n  }\n}\n","export * from './ruralarea'\n","import { Town, TownSize, Distance } from '@biogrid/grid-simulator';\nimport { Building } from '../building';\n\n/**\n * A rural area that represents a community where a microgrid can function.\n */\nexport class RuralArea implements Town {\n  private buildings: Building[] = [];\n  private townSize: TownSize;\n\n  /**\n   * @param {Building[]} buildings A list of buildings which make up a town.\n   */\n  constructor(\n    buildings: Building[],\n    townWidth: Distance,\n    townHeight: Distance\n  ) {\n    this.townSize = { width: townWidth, height: townHeight };\n    for (let i = 0; i < buildings.length; i++) {\n      this.addEnergyUser(buildings[i]);\n    }\n  }\n\n  getEnergyUsers(): Building[] {\n    return this.buildings;\n  }\n\n  getTownSize() {\n    return this.townSize;\n  }\n\n  /**\n   * This method gets a building in a town by its id number.\n   * @param {number} Id The building Id we're looking for.\n   * @return {Building} Returns the building if found in the list, null if not.\n   */\n  getBuildingById(Id: number) {\n    for (let i = 0; i < this.buildings.length; i++) {\n      if (this.buildings[i].getBuildingId() === Id) {\n        return this.buildings[i];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * This method adds a building to our town and assigns it a random Id.\n   * @param {Building} newBuilding The building to be added.\n   */\n  addEnergyUser(newBuilding: Building): Building {\n    const pos = newBuilding.getRelativePosition();\n    if (pos.x > this.townSize.width || pos.y > this.townSize.height) {\n      throw new Error(\n        \"Building relativePosition must be within the town's size constraints\"\n      );\n    }\n    const randomIds = this.buildings.map((building) =>\n      building.getBuildingId()\n    );\n    let randomId = Math.floor(Math.random() * 1000);\n    while (randomIds.includes(randomId)) {\n      randomId = Math.floor(Math.random() * 1000);\n    }\n    newBuilding.setBuildingId(randomId);\n    this.buildings.push(newBuilding);\n    return newBuilding;\n  }\n}\n","export * from './BiogridController';\n"],"sourceRoot":""}