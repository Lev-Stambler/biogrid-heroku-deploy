{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"tslib\"","webpack:///./libs/biogrid-simulator/src/lib/config/index.ts","webpack:///./apps/api/src/app/config/constants.ts","webpack:///./apps/api/src/app/config/Logger.ts","webpack:///external \"tsoa\"","webpack:///./apps/api/src/app/controllers/BiogridController.ts","webpack:///./libs/biogrid-simulator/src/index.ts","webpack:///./libs/biogrid-simulator/src/lib/biobattery/index.ts","webpack:///./libs/grid-simulator/src/index.ts","webpack:///external \"graphlib\"","webpack:///./libs/biogrid-simulator/src/lib/bioenergy-source/index.ts","webpack:///./libs/biogrid-simulator/src/lib/biogrid-state/index.ts","webpack:///./apps/api/src/main.ts","webpack:///./apps/api/src/app/config/Server.ts","webpack:///external \"express\"","webpack:///external \"swagger-ui-express\"","webpack:///external \"body-parser\"","webpack:///external \"morgan\"","webpack:///./apps/api/src/environments/environment.prod.ts","webpack:///./apps/api/src/app/config/ErrorHandler.ts","webpack:///external \"winston\"","webpack:///./apps/api/src/app/build/routes.ts","webpack:///./apps/api/src/app/services/index.ts","webpack:///./apps/api/src/app/services/Biogrid.ts","webpack:///./libs/biogrid-simulator/src/lib/biobattery/biobattery-class.ts","webpack:///./libs/grid-simulator/src/lib/battery/index.ts","webpack:///./libs/grid-simulator/src/lib/brain/index.ts","webpack:///./libs/grid-simulator/src/lib/energy-source/index.ts","webpack:///./libs/grid-simulator/src/lib/grid/index.ts","webpack:///./libs/grid-simulator/src/lib/grid-action/index.ts","webpack:///./libs/grid-simulator/src/lib/grid-item/index.ts","webpack:///./libs/grid-simulator/src/lib/energyuser/index.ts","webpack:///./libs/grid-simulator/src/lib/town/index.ts","webpack:///./libs/grid-simulator/src/lib/state/index.ts","webpack:///./libs/grid-simulator/src/lib/validate-inputs/index.ts","webpack:///./libs/grid-simulator/src/lib/validate-inputs/validate-inputs.ts","webpack:///./libs/biogrid-simulator/src/lib/config/bio-constants.ts","webpack:///./libs/biogrid-simulator/src/lib/biobrain/index.ts","webpack:///./libs/biogrid-simulator/src/lib/biobrain/biobrain-class.ts","webpack:///./libs/biogrid-simulator/src/lib/bioenergy-source/bioenergy-source-class.ts","webpack:///./libs/biogrid-simulator/src/lib/biogrid/index.ts","webpack:///./libs/biogrid-simulator/src/lib/biogrid/biogrid-class.ts","webpack:///./libs/biogrid-simulator/src/lib/biogrid-state/biogrid-state-class.ts","webpack:///./libs/biogrid-simulator/src/lib/biogrid-action/index.ts","webpack:///./libs/biogrid-simulator/src/lib/biogrid-action/biogrid-action-class.ts","webpack:///./libs/biogrid-simulator/src/lib/building/index.ts","webpack:///./libs/biogrid-simulator/src/lib/building/building.ts","webpack:///./libs/biogrid-simulator/src/lib/community/index.ts","webpack:///./libs/biogrid-simulator/src/lib/community/ruralarea.ts","webpack:///./apps/api/src/app/controllers/index.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","module.exports = require(\"tslib\");","export * from './bio-constants'\n","import { environment } from '../../environments/environment';\n\nexport default {\n  environment: environment.production ? 'production' : 'development',\n  port: environment.port || 3333,\n  errorTypes: {\n    db: {\n      statusCode: 500,\n      name: 'Internal Server Error',\n      message: 'database error',\n    },\n    validation: {\n      statusCode: 400,\n      name: 'Bad Request',\n      message: 'validation error',\n    },\n    auth: { statusCode: 401, name: 'Unauthorized', message: 'auth error' },\n    forbidden: {\n      statusCode: 403,\n      name: 'Forbidden',\n      message: 'forbidden content',\n    },\n    notFound: {\n      statusCode: 404,\n      name: 'Not Found',\n      message: 'content not found',\n    },\n    entity: {\n      statusCode: 422,\n      name: 'Unprocessable Entity',\n      message: 'entity error',\n    },\n  },\n  get errorMap() {\n    return {\n      ValidateError: this.errorTypes.validation,\n      ValidationError: this.errorTypes.validation,\n      CastError: this.errorTypes.db,\n    };\n  },\n};\n","import constants from './constants';\nimport * as logger from 'winston';\n\nconst date = new Date();\nconst fileName = `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}.log`;\nlogger.configure({\n  level: 'debug',\n  format: logger.format.combine(\n    logger.format.colorize(),\n    logger.format.simple()),\n  transports: [\n    new logger.transports.File({ filename: `logs/${fileName}`, level: 'debug' }),\n    new logger.transports.Console()\n  ]\n});\n\nexport class Logger {\n  public static readonly shouldLog: boolean = constants.environment !== 'test';\n  public static readonly console = logger;\n\n  public static log(...args: unknown[]): void {\n    if (Logger.shouldLog) Logger.console.debug(Logger.formatArgs(args));\n  }\n\n  public static warn(...args: unknown[]): void {\n    if (Logger.shouldLog) Logger.console.warn(Logger.formatArgs(args));\n  }\n\n  public static error(...args: unknown[]): void {\n    if (Logger.shouldLog) Logger.console.error(Logger.formatArgs(args));\n  }\n\n  public static info(...args: unknown[]): void {\n    if (Logger.shouldLog) Logger.console.info(Logger.formatArgs(args));\n  }\n\n  public static verbose(...args: unknown[]): void {\n    if (Logger.shouldLog) Logger.console.verbose(Logger.formatArgs(args));\n  }\n\n  private static formatArgs(args: unknown[]): string {\n    return JSON.stringify(args, null, 4);\n  }\n\n}\n","module.exports = require(\"tsoa\");","import { Route, Controller, Get, Post, Body, SuccessResponse } from 'tsoa';\n\nimport {\n  createNewBiogrid,\n  runBiogridSimulation,\n  getSimulationResults,\n  BiogridSimulationResults,\n  NewBiogridOpts,\n} from '../services';\n\n@Route('biogrid')\nexport class BiogridController extends Controller {\n  constructor() {\n    super();\n  }\n\n  @SuccessResponse(204)\n  @Post('/')\n  public async NewBiogrid(@Body() body: NewBiogridOpts): Promise<void> {\n    await createNewBiogrid(body);\n  }\n\n  @SuccessResponse(204)\n  @Post('/run')\n  public async RunBiogridSimulation(): Promise<void> {\n    await runBiogridSimulation();\n  }\n\n  @SuccessResponse(200)\n  @Get('/simulation-results')\n  public async GetBiogridSimulationResults(): Promise<\n    BiogridSimulationResults\n  > {\n    return await getSimulationResults();\n  }\n}\n","export * from './lib/biobattery';\nexport * from './lib/biobrain';\nexport * from './lib/bioenergy-source';\nexport * from './lib/biogrid';\nexport * from './lib/biogrid-action';\nexport * from './lib/biogrid-state';\nexport * from './lib/building';\nexport * from './lib/community';\n","export * from './biobattery-class';\n","export * from './lib/battery';\nexport * from './lib/brain';\nexport * from './lib/energy-source';\nexport * from './lib/grid';\nexport * from './lib/grid-action';\nexport * from './lib/grid-item';\nexport * from './lib/measurements';\nexport * from './lib/energyuser';\nexport * from './lib/town';\nexport * from './lib/state';\nexport * from './lib/validate-inputs';\n\n","module.exports = require(\"graphlib\");","export * from './bioenergy-source-class';\n","export * from './biogrid-state-class';\n","import { Server } from './app/config/Server';\n\nconst server: Server = new Server();\n\nserver.listen();\n","import express from 'express';\nimport * as swaggerUi from 'swagger-ui-express';\nimport * as bodyParser from 'body-parser';\nimport morgan from 'morgan';\n\nimport constants from './constants';\nimport { ErrorHandler } from './ErrorHandler';\nimport { RegisterRoutes } from '../build/routes';\nimport { Logger } from './Logger';\nimport '../controllers';\n\nexport class Server {\n  public app: express.Express = express();\n  private readonly port: number = constants.port;\n\n  constructor() {\n    this.app.use(this.allowCors);\n    this.app.use(bodyParser.urlencoded({ extended: true }));\n    this.app.use(bodyParser.json());\n    this.app.use(morgan('dev', { skip: () => !Logger.shouldLog }));\n    RegisterRoutes(this.app);\n    this.app.use(ErrorHandler.handleError);\n    this.serveStaticFiles();\n\n    // Disable linter as require statement is necessary for swagger files\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const swaggerDocument = require('../build/swagger.json');\n\n    this.app.use(\n      '/api-docs',\n      swaggerUi.serve,\n      swaggerUi.setup(swaggerDocument)\n    );\n  }\n\n  public async listen(port: number = this.port) {\n    process.on('uncaughtException', this.criticalErrorHandler);\n    process.on('unhandledRejection', this.criticalErrorHandler);\n    const listen = this.app.listen(this.port);\n    Logger.info(\n      `${constants.environment} server running on port: ${this.port}`\n    );\n    return listen;\n  }\n\n  /**\n   * Serve the built, static frontend files for production\n   */\n  private serveStaticFiles() {\n    const staticDir = __dirname + '/build/public';\n    this.app.use(express.static(staticDir));\n  }\n\n  private criticalErrorHandler(...args: unknown[]) {\n    Logger.error('Critical Error...', ...args);\n    process.exit(1);\n  }\n\n  private allowCors(\n    req: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ): void {\n    // TODO: in a later PR only specific sites will have access. For now, as we get setup, any site can have API access\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header(\n      'Access-Control-Allow-Headers',\n      'Origin, X-Requested-With, Content-Type, Accept, Authorization, apikey, x-access-token'\n    );\n    next();\n  }\n}\n","module.exports = require(\"express\");","module.exports = require(\"swagger-ui-express\");","module.exports = require(\"body-parser\");","module.exports = require(\"morgan\");","export const environment = {\n  production: true,\n  port: 8080\n};\n","import { Request, Response, NextFunction } from 'express';\n\nimport constants from './constants';\nimport { Logger } from './Logger';\n\nexport interface ErrorType {\n  statusCode: number;\n  name: string;\n  message: string;\n  fields?: { [field: string]: { message: string } };\n}\n\nexport class ApiError extends Error implements ErrorType {\n  public statusCode = 500;\n  public fields?: { [field: string]: { message: string } };\n\n  constructor(errorType: ErrorType) {\n    super(errorType.message);\n    this.name = errorType.name;\n    if (errorType.statusCode) {\n      this.statusCode = errorType.statusCode;\n    }\n    this.fields = errorType.fields;\n  }\n}\n\nexport class ErrorHandler {\n  public static handleError(\n    error: ApiError,\n    req: Request,\n    res: Response,\n    next: NextFunction\n  ): void {\n    const { name, message, fields, statusCode } = error;\n    Logger.error(\n      `Error: ${statusCode}`,\n      `Error Name: ${name}`,\n      `Error Message: ${message}`,\n      'Error Fields:',\n      fields || {},\n      'Original Error: ',\n      error\n    );\n    res.status(statusCode).json({ name, message, fields });\n    next();\n  }\n}\n","module.exports = require(\"winston\");","/* tslint:disable */\r\n/* eslint-disable */\r\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\nimport { Controller, ValidationService, FieldErrors, ValidateError, TsoaRoute } from 'tsoa';\r\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\nimport { BiogridController } from './../controllers/BiogridController';\r\nimport * as express from 'express';\r\n\r\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\nconst models: TsoaRoute.Models = {\r\n  \"NewBiogridOpts\": {\r\n    \"dataType\": \"refObject\",\r\n    \"properties\": {\r\n      \"startDate\": { \"dataType\": \"datetime\", \"required\": true },\r\n      \"endDate\": { \"dataType\": \"datetime\", \"required\": true },\r\n      \"smallBatteryCells\": { \"dataType\": \"double\", \"required\": true },\r\n      \"largeBatteryCells\": { \"dataType\": \"double\", \"required\": true },\r\n    },\r\n    \"additionalProperties\": true,\r\n  },\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n  \"BiogridSimulationResults\": {\r\n    \"dataType\": \"refObject\",\r\n    \"properties\": {\r\n      \"energyWastedFromSource\": { \"dataType\": \"double\" },\r\n      \"energyWastedInTransportation\": { \"dataType\": \"double\" },\r\n      \"timeWithoutEnoughEnergy\": { \"dataType\": \"double\" },\r\n      \"states\": { \"dataType\": \"array\", \"array\": { \"dataType\": \"any\" }, \"required\": true },\r\n    },\r\n    \"additionalProperties\": true,\r\n  },\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n};\r\nconst validationService = new ValidationService(models);\r\n\r\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\nexport function RegisterRoutes(app: express.Express) {\r\n  // ###########################################################################################################\r\n  //  NOTE: If you do not see routes for all of your controllers in this file, then you might not have informed tsoa of where to look\r\n  //      Please look into the \"controllerPathGlobs\" config option described in the readme: https://github.com/lukeautry/tsoa\r\n  // ###########################################################################################################\r\n  app.post('/api/biogrid',\r\n    function(request: any, response: any, next: any) {\r\n      const args = {\r\n        body: { \"in\": \"body\", \"name\": \"body\", \"required\": true, \"ref\": \"NewBiogridOpts\" },\r\n      };\r\n\r\n      // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n      let validatedArgs: any[] = [];\r\n      try {\r\n        validatedArgs = getValidatedArgs(args, request);\r\n      } catch (err) {\r\n        return next(err);\r\n      }\r\n\r\n      const controller = new BiogridController();\r\n\r\n\r\n      const promise = controller.NewBiogrid.apply(controller, validatedArgs as any);\r\n      promiseHandler(controller, promise, response, next);\r\n    });\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n  app.post('/api/biogrid/run',\r\n    function(request: any, response: any, next: any) {\r\n      const args = {\r\n      };\r\n\r\n      // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n      let validatedArgs: any[] = [];\r\n      try {\r\n        validatedArgs = getValidatedArgs(args, request);\r\n      } catch (err) {\r\n        return next(err);\r\n      }\r\n\r\n      const controller = new BiogridController();\r\n\r\n\r\n      const promise = controller.RunBiogridSimulation.apply(controller, validatedArgs as any);\r\n      promiseHandler(controller, promise, response, next);\r\n    });\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n  app.get('/api/biogrid/simulation-results',\r\n    function(request: any, response: any, next: any) {\r\n      const args = {\r\n      };\r\n\r\n      // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n      let validatedArgs: any[] = [];\r\n      try {\r\n        validatedArgs = getValidatedArgs(args, request);\r\n      } catch (err) {\r\n        return next(err);\r\n      }\r\n\r\n      const controller = new BiogridController();\r\n\r\n\r\n      const promise = controller.GetBiogridSimulationResults.apply(controller, validatedArgs as any);\r\n      promiseHandler(controller, promise, response, next);\r\n    });\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n  function isController(object: any): object is Controller {\r\n    return 'getHeaders' in object && 'getStatus' in object && 'setStatus' in object;\r\n  }\r\n\r\n  function promiseHandler(controllerObj: any, promise: any, response: any, next: any) {\r\n    return Promise.resolve(promise)\r\n      .then((data: any) => {\r\n        let statusCode;\r\n        if (isController(controllerObj)) {\r\n          const headers = controllerObj.getHeaders();\r\n          Object.keys(headers).forEach((name: string) => {\r\n            response.set(name, headers[name]);\r\n          });\r\n\r\n          statusCode = controllerObj.getStatus();\r\n        }\r\n\r\n        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n        if (data && typeof data.pipe === 'function' && data.readable && typeof data._read === 'function') {\r\n          data.pipe(response);\r\n        } else if (data || data === false) { // === false allows boolean result\r\n          response.status(statusCode || 200).json(data);\r\n        } else {\r\n          response.status(statusCode || 204).end();\r\n        }\r\n      })\r\n      .catch((error: any) => next(error));\r\n  }\r\n\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n\r\n  function getValidatedArgs(args: any, request: any): any[] {\r\n    const fieldErrors: FieldErrors = {};\r\n    const values = Object.keys(args).map((key) => {\r\n      const name = args[key].name;\r\n      switch (args[key].in) {\r\n        case 'request':\r\n          return request;\r\n        case 'query':\r\n          return validationService.ValidateParam(args[key], request.query[name], name, fieldErrors, undefined, { \"specVersion\": 2 });\r\n        case 'path':\r\n          return validationService.ValidateParam(args[key], request.params[name], name, fieldErrors, undefined, { \"specVersion\": 2 });\r\n        case 'header':\r\n          return validationService.ValidateParam(args[key], request.header(name), name, fieldErrors, undefined, { \"specVersion\": 2 });\r\n        case 'body':\r\n          return validationService.ValidateParam(args[key], request.body, name, fieldErrors, name + '.', { \"specVersion\": 2 });\r\n        case 'body-prop':\r\n          return validationService.ValidateParam(args[key], request.body[name], name, fieldErrors, 'body.', { \"specVersion\": 2 });\r\n      }\r\n    });\r\n\r\n    if (Object.keys(fieldErrors).length > 0) {\r\n      throw new ValidateError(fieldErrors, '');\r\n    }\r\n    return values;\r\n  }\r\n\r\n  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n}\r\n\r\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\r\n","export * from './Biogrid'\n","import {\n  Biogrid,\n  RuralArea,\n  Building,\n  BioBrain,\n} from '@biogrid/biogrid-simulator';\nexport interface BiogridSimulationResults {\n  energyWastedFromSource?: number;\n  energyWastedInTransportation?: number;\n  timeWithoutEnoughEnergy?: number;\n  states: any[];\n}\n\nexport interface NewBiogridOpts {\n  startDate: Date;\n  endDate: Date;\n  smallBatteryCells: number;\n  largeBatteryCells: number;\n}\n\n// TODO change to a stateless solution\n// See issue: https://github.com/googleinterns/step141-2020/issues/50\nlet biogrid: Biogrid;\nconst biobrain = BioBrain.Instance;\nconst states: any[] = [];\n\n// TODO, allow users to specify number of buildings, town size, and number of Solar Panels\n// See issue: https://github.com/googleinterns/step141-2020/issues/49\nexport async function createNewBiogrid(body: NewBiogridOpts) {\n  const buildings = [\n    new Building(10, 2, 3),\n    new Building(10, 5, 4),\n    new Building(10, 4, 3),\n    new Building(10, 1, 2),\n    new Building(10, 3, 1),\n  ];\n  const town = new RuralArea(buildings, 10, 10);\n  biogrid = new Biogrid(town, {\n    numberOfLargeBatteryCells: body.largeBatteryCells,\n    numberOfSmallBatteryCells: body.smallBatteryCells,\n    numberOfSolarPanels: 10,\n  });\n  return 'Created';\n}\n\nexport async function runBiogridSimulation() {\n  const action = biobrain.computeAction(biogrid.getSystemState());\n  biogrid.takeAction(action);\n  states.push(biogrid.getJsonGraphDetails());\n  return 'Fake';\n}\n\nexport async function getSimulationResults(): Promise<\n  BiogridSimulationResults\n> {\n  // TODO implement\n  return {\n    energyWastedFromSource: 10,\n    energyWastedInTransportation: 12,\n    timeWithoutEnoughEnergy: 24,\n    states,\n  };\n}\n","import {\n  Battery,\n  Distance,\n  Energy,\n  ItemPosition,\n  Validatable,\n  validate,\n} from '@biogrid/grid-simulator';\nimport { SMALL_BATTERY } from '../config';\n\nexport class BioBattery implements Battery {\n  private currentBatteryEnergy: Energy;\n  private readonly maxCapacity: Energy;\n  name: string;\n  private readonly relativePosition: ItemPosition;\n\n  /**\n   * Take in a relativePosition which is generated by the grid class so that batteries\n   * are evenly spaced out.\n   * The relativePositions have been verified in the Biogrid class\n   * @param x Distance from the left edge of the town\n   * @param y Distance from the top edge of the town\n   */\n  constructor(\n    x: Distance,\n    y: Distance,\n    typeOfBattery: string,\n    currentBatteryEnergy: Energy = SMALL_BATTERY.DEFAULT_START_ENERGY,\n    maxCapacity: Energy = SMALL_BATTERY.MAX_CAPACITY\n  ) {\n    this.relativePosition = { x, y };\n    if (!this.validateInputs(currentBatteryEnergy, maxCapacity)) {\n      // TODO return a tuple of from validate to with the boolean and unpassed validations\n      throw new Error(\n        `Cannot create a battery with values: (${currentBatteryEnergy}, ${maxCapacity})`\n      );\n    }\n    this.currentBatteryEnergy = currentBatteryEnergy;\n    this.maxCapacity = maxCapacity;\n    this.name = typeOfBattery;\n  }\n\n  getRelativePosition() {\n    return this.relativePosition;\n  }\n\n  startCharging(inputPower: Energy): void {\n    if (this.currentBatteryEnergy + inputPower > this.maxCapacity) {\n      this.currentBatteryEnergy = this.maxCapacity;\n    }\n    this.currentBatteryEnergy += inputPower;\n  }\n\n  // TODO implement when you use a formula for charging a battery\n  stopCharging(): void {}\n\n  supplyPower(outputenergy: Energy): Energy {\n    if (this.currentBatteryEnergy - outputenergy < 0) {\n      //TODO implement the function to notify the request with amount of output left\n      const temp: Energy = this.currentBatteryEnergy;\n      this.currentBatteryEnergy = 0;\n      return temp;\n    }\n    this.currentBatteryEnergy -= outputenergy;\n    return outputenergy;\n  }\n\n  private validateInputs(\n    currentBatteryPower: Energy,\n    maxCapacity: Energy = this.maxCapacity\n  ) {\n    const batteryValidator: Validatable = {\n      value: currentBatteryPower,\n      max: maxCapacity,\n      isPositive: currentBatteryPower >= 0 && maxCapacity >= 0,\n    };\n    return validate(batteryValidator);\n  }\n\n  getEnergyInJoules(): Energy {\n    return this.currentBatteryEnergy;\n  }\n\n  get MaxCapacity(): Energy {\n    return this.maxCapacity;\n  }\n\n  isEmpty(): boolean {\n    return this.currentBatteryEnergy === 0;\n  }\n\n  isFull(): boolean {\n    return this.currentBatteryEnergy === this.maxCapacity;\n  }\n}\n","export * from './battery-interface';\n","export * from './brain-interface';\n","export * from './energy-source-interface';\n","export * from './grid-interface'\n","export * from './grid-action-interface'\n","export * from './grid-item'\n","export * from './energyuser'\n","export * from './town'\n","export * from './state-interface'\n","export * from './validate-inputs';\n","// Validation\nexport interface Validatable {\n  value: number;\n  min?: number;\n  max?: number;\n  isPositive: boolean;\n}\n\nexport function validate(validatableInput: Validatable): boolean {\n  let isValid = true;\n  if (\n    validatableInput.min != null && \n    typeof validatableInput.value === 'number') {\n      isValid = isValid && validatableInput.value >= validatableInput.min;\n  }\n  if (\n    validatableInput.max != null &&\n    typeof validatableInput.value === 'number'\n  ) {\n    isValid = isValid && validatableInput.value <= validatableInput.max;\n  }\n  return isValid && validatableInput.isPositive;\n}\n","import { BioBattery, BioEnergySource, Building } from '@biogrid/biogrid-simulator';\nimport { Path } from 'graphlib';\n\nexport const SMALL_BATTERY = {\n  DEFAULT_START_ENERGY: 13500,\n  MAX_CAPACITY: 13500,\n};\n\nexport const LARGE_BATTERY = {\n  DEFAULT_START_ENERGY: 540000,\n  MAX_CAPACITY: 540000,\n};\n\n// Each day a solar panel is roughly charged with electricity\n// for 4hours at a rate of 250 watts ~ 1000watts ~~ 3.6Mj\n// To prolong their life time, solar panels will be expected \n// to keep a minimum of about 10000j\nexport const SOLAR_PANEL = {\n  DEFAULT_INITIAL_ENERGY: 3600000,\n  MIN_CAPACITY: 10000,\n};\n\nexport const enum GRID_ITEM_NAMES {\n  SOLAR_PANEL = 'solar_panel',\n  SMALL_BATTERY = 'small_battery',\n  LARGE_BATTERY = 'large_battery',\n  ENERGY_USER = 'energy_user',\n  GRID = 'grid',\n};\n\nexport const BUILDING = {\n  DEFAULT_INITIAL_ENERGY: 4545,\n  MIN_CAPACITY: 0,\n  MAX_CAPACITY: 4545,\n};\n\nexport type SupplyFromAgent = BioBattery | BioEnergySource;\n\nexport type SupplyToAgent = BioBattery[] | Building[];\n\nexport interface ShortestDistances {\n  [source: string]: { [node: string]: Path };\n}\n","export * from './biobrain-class';\n","import { Brain, GridAction, GridItem, StateGraph, SupplyingPath } from '@biogrid/grid-simulator';\nimport { BiogridAction, Building, BioBattery, BioEnergySource } from '@biogrid/biogrid-simulator';\nimport { GRID_ITEM_NAMES, SupplyToAgent, SupplyFromAgent, ShortestDistances } from '../config';\nimport { Path, Graph } from 'graphlib';\n\n\n// We can only have one BioBrain per grid\nexport class BioBrain implements Brain {\n  private static instance: BioBrain;\n  private clonedGraph: Graph = new Graph();\n  private constructor() {}\n\n  static get Instance(): BioBrain {\n    if (!this.instance) {\n      this.instance = new BioBrain();\n    }\n    return this.instance;\n  }\n\n  computeAction(state: StateGraph): GridAction {\n\n    let shortestDistances = state.getShortestDistances();\n\n    this.clonedGraph = state.cloneStateGraph();\n\n    // Create an object of buildings with the energyProviders which supplied\n    // TODO assign the building as Building not the names\n    let buildingSuppliers: SupplyingPath = this.buildingCharging(\n      this.getGridItems()[GRID_ITEM_NAMES.ENERGY_USER],\n      this.getGridItems()[GRID_ITEM_NAMES.SMALL_BATTERY],\n      this.getGridItems()[GRID_ITEM_NAMES.LARGE_BATTERY],\n      this.getGridItems()[GRID_ITEM_NAMES.SOLAR_PANEL],\n      shortestDistances\n    );\n\n    let smallBatterySupplier: SupplyingPath = this.chargeSmallBatteries(\n      this.getGridItems()[GRID_ITEM_NAMES.SMALL_BATTERY],\n      this.getGridItems()[GRID_ITEM_NAMES.LARGE_BATTERY],\n      this.getGridItems()[GRID_ITEM_NAMES.SOLAR_PANEL],\n      shortestDistances\n    );\n\n    let largeBatterySupplier: SupplyingPath = this.chargeLargebatteries(\n      this.getGridItems()[GRID_ITEM_NAMES.LARGE_BATTERY],\n      this.getGridItems()[GRID_ITEM_NAMES.SOLAR_PANEL],\n      shortestDistances\n    );\n\n    return new BiogridAction({\n      ...buildingSuppliers,\n      ...smallBatterySupplier,\n      ...largeBatterySupplier\n    });\n  }\n\n  private getGridItems() {\n    // TODO add the type of states\n    let buildings: Building[] = [];\n    let smallBatteries: BioBattery[] = [];\n    let largeBatteries: BioBattery[] = [];\n    let solarPanels: BioEnergySource[] = [];\n\n    const allGridItems = this.clonedGraph.nodes();\n    allGridItems.map(item => {\n      const gridItem = this.clonedGraph.node(item);\n      if (gridItem.name.includes(GRID_ITEM_NAMES.ENERGY_USER)) {\n        buildings.push(gridItem as Building);\n      } else if (gridItem.name.includes(GRID_ITEM_NAMES.SMALL_BATTERY)) {\n        smallBatteries.push(gridItem as BioBattery);\n      } else if (gridItem.name.includes(GRID_ITEM_NAMES.LARGE_BATTERY)) {\n        largeBatteries.push(gridItem as BioBattery);\n      } else if (gridItem.name.includes(GRID_ITEM_NAMES.SOLAR_PANEL)) {\n        solarPanels.push(gridItem as BioEnergySource);\n      }\n    });\n\n    return {\n      [GRID_ITEM_NAMES.ENERGY_USER]: buildings,\n      [GRID_ITEM_NAMES.SMALL_BATTERY]: smallBatteries,\n      [GRID_ITEM_NAMES.LARGE_BATTERY]: largeBatteries,\n      [GRID_ITEM_NAMES.SOLAR_PANEL]: solarPanels\n    };\n  }\n\n  private chargeLargebatteries(\n    largeBatteries: BioBattery[],\n    solarPanels: BioEnergySource[],\n    shortestDistances: {[source: string]: { [node: string]: Path}}\n  ): SupplyingPath {\n    // Assuming the large battery is not fully charged\n    largeBatteries = largeBatteries.filter((battery) => !battery.isFull());\n\n    // Filter the solar panels and remove the ones with the minimum energy or empty\n    solarPanels = solarPanels.filter((solarPanel) => !solarPanel.isEmpty());\n\n    // Create an array of the possible energy givers\n    const allEnergyProviders = [...solarPanels];\n\n    return this.determineSupplyingPath(largeBatteries, allEnergyProviders, shortestDistances);\n  }\n\n\n\n  private chargeSmallBatteries(\n    smallBatteries: BioBattery[],\n    largeBatteries: BioBattery[],\n    solarPanels: BioEnergySource[],\n    shortestDistances: {[source: string]: { [node: string]: Path}}\n  ): SupplyingPath {\n    // Assuming the small batteries are not fully charged\n    smallBatteries = smallBatteries.filter((battery) => !battery.isFull());\n\n    // Filter the large batteries and remove the ones which do not have power in them\n    largeBatteries = largeBatteries.filter((battery) => !battery.isEmpty());\n\n    // Filter the solar panels and remove the ones with the minimum energy or empty\n    solarPanels = solarPanels.filter((solarPanel) => !solarPanel.isEmpty());\n\n    // Create an array of the possible energy givers\n    const allEnergyProviders = [\n      ...solarPanels,\n      ...largeBatteries,\n    ];\n\n    return this.determineSupplyingPath(smallBatteries, allEnergyProviders, shortestDistances);\n  }\n\n  private buildingCharging(\n    buildings: Building[],\n    smallBatteries: BioBattery[],\n    largeBatteries: BioBattery[],\n    solarPanels: BioEnergySource[],\n    shortestDistances: {[source: string]: { [node: string]: Path}}\n  ): SupplyingPath {\n    // Assuming that the houses asking for power will not have power in them.\n    // Do not consider building with full power capacity\n    buildings = buildings.filter((building) => {\n      return building.getEnergyInJoules() === building.MinCapacity;\n    });\n\n    // Filter the batteries and removes the ones which do not have power in them\n    // Do not include batteries which are empty\n    smallBatteries = smallBatteries.filter((battery) => !battery.isEmpty());\n    largeBatteries = largeBatteries.filter((battery) => !battery.isEmpty());\n\n    // Filter the solar panels and remove the ones with the minimum energy or empty\n    solarPanels = solarPanels.filter((solarPanel) => !solarPanel.isEmpty());\n\n    // Create an array of the possible energy givers\n    const allEnergyProviders = [\n      ...smallBatteries,\n      ...solarPanels,\n      ...largeBatteries,\n    ];\n\n    return this.determineSupplyingPath(buildings, allEnergyProviders, shortestDistances);\n  }\n\n  private determineSupplyingPath(\n    supplyToAgents: SupplyToAgent,\n    supplyFromAgents: SupplyFromAgent[],\n    shortestDistances: ShortestDistances\n  ): SupplyingPath {\n    // Create an object of buildings with the energyProviders which supplied\n    // TODO: advancement: assign the supplyToAgent itself not the names\n    let supplyToSupplyFromAgents: SupplyingPath = {};\n    for (const supplyToAgent of supplyToAgents) {\n      const energyReq = supplyToAgent.MaxCapacity - supplyToAgent.getEnergyInJoules();\n      let shortestDistance = Number.POSITIVE_INFINITY;\n      // Keep track of the batteryPosition\n      let indexOfProvider = -1;\n      for (let index = 0; index < supplyFromAgents.length; index++) {\n        const newShortestDistance =\n          shortestDistances[supplyFromAgents[index].name][supplyToAgent.name]\n            .distance;\n        const energyProvided = supplyFromAgents[index].getEnergyInJoules();\n        if (\n          newShortestDistance < shortestDistance &&\n          energyProvided >= energyReq\n        ) {\n          shortestDistance = newShortestDistance;\n          indexOfProvider = index;\n        }\n      }\n      if (indexOfProvider === -1) {\n        continue;\n      }\n      const provideFrom = supplyFromAgents[indexOfProvider];\n      const provideTo = supplyToAgent;\n      if (provideTo instanceof BioBattery) {\n        provideTo.startCharging(energyReq);\n      } else {\n        provideTo.increaseEnergy(energyReq);\n      }\n      provideFrom.supplyPower(energyReq);\n\n      this.clonedGraph.setNode(provideFrom.name, provideFrom);\n      this.clonedGraph.setNode(provideTo.name, provideTo);\n\n      supplyFromAgents[indexOfProvider].supplyPower(energyReq);\n      supplyToSupplyFromAgents[supplyToAgent.name] =\n        supplyFromAgents[indexOfProvider].name;\n    }\n    return supplyToSupplyFromAgents;\n  }\n}\n","import {\n  Energy,\n  EnergySource,\n  Validatable,\n  validate,\n  ItemPosition,\n  Distance,\n} from '@biogrid/grid-simulator';\nimport { GRID_ITEM_NAMES, SOLAR_PANEL } from '../config';\n\nexport class BioEnergySource implements EnergySource {\n  private sourceCapacity: Energy;\n  private readonly minCapacity: Energy;\n  private energySourceValidator?: Validatable;\n  name: string;\n  private relativePosition: ItemPosition;\n\n  constructor(\n    x: Distance,\n    y: Distance,\n    name: string = GRID_ITEM_NAMES.SOLAR_PANEL,\n    sourceCapacity: Energy = SOLAR_PANEL.DEFAULT_INITIAL_ENERGY,\n    minCapacity: Energy = SOLAR_PANEL.MIN_CAPACITY\n  ) {\n    this.name = name;\n    this.relativePosition = { x, y };\n    if (!this.validateInputs(sourceCapacity, minCapacity)) {\n      // TODO return a tuple of from validate to with the boolean and unpassed validations\n      throw new Error(\n        `Cannot create an Energy source object with values: (${sourceCapacity}, ${minCapacity})`\n      );\n    }\n    this.sourceCapacity = sourceCapacity;\n    this.minCapacity = minCapacity;\n  }\n\n  public getRelativePosition() {\n    return this.relativePosition;\n  }\n\n  public getMinCapacity(): Energy {\n    return this.minCapacity;\n  }\n\n  private validateInputs(\n    sourceCapacity: Energy,\n    minCapacity: Energy = this.minCapacity\n  ) {\n    this.energySourceValidator = {\n      value: sourceCapacity,\n      min: minCapacity,\n      isPositive: sourceCapacity >= 0 && minCapacity >= 0,\n    };\n    return validate(this.energySourceValidator);\n  }\n\n  supplyPower(requiredEnergy: Energy): Energy {\n    this.sourceCapacity = this.sourceCapacity - requiredEnergy;\n    return requiredEnergy;\n  }\n\n  getEnergyInJoules() {\n    return this.sourceCapacity;\n  }\n\n  get MinCapacity(): Energy {\n    return this.minCapacity;\n  }\n\n  isEmpty(): boolean {\n    return this.sourceCapacity === this.minCapacity;\n  }\n\n  set SourceCapacity(inputEnergy: Energy) {\n    if (!this.validateInputs(inputEnergy)) {\n      // TODO return a tuple of from validate to with the boolean and unpassed validations\n      throw new Error(`Cannot set inputEnergy to ${inputEnergy}`);\n    }\n    this.sourceCapacity = inputEnergy;\n  }\n}\n","export * from './biogrid-class'\n","import {\n  Grid,\n  GridAction,\n  GridOptions,\n  Town,\n  TownSize,\n  ItemPosition,\n  Energy,\n  Battery,\n  GridItem,\n  EnergySource,\n} from '@biogrid/grid-simulator';\nimport { BiogridState } from '../biogrid-state';\nimport { BioBattery } from '../biobattery';\n\nimport { BioEnergySource } from '../bioenergy-source';\nimport { LARGE_BATTERY, SMALL_BATTERY, SOLAR_PANEL, GRID_ITEM_NAMES } from '../config';\nimport { Building } from '@biogrid/biogrid-simulator';\n\nexport interface BiogridOptions extends GridOptions {\n  numberOfSmallBatteryCells: number;\n  numberOfLargeBatteryCells: number;\n  numberOfSolarPanels: number;\n}\n\nexport class Biogrid implements Grid {\n  // TODO create a singleton for the Biogrid not BiogridState\n  private state: BiogridState;\n\n  // All details for the batteries in the grid\n  // The small batteries in the grid, will approximately have a maxCapacity of 13,500KJ\n  private smallBatteries: Battery[];\n  // The large batteries in the grid, will approximately have a maxCapacity of 540,000KJ\n  private largeBatteries: Battery[];\n\n  // All details for the houses / energyUsers in the grid\n  private town: Town;\n\n  // All details for the source of energy\n  private solarPanels: EnergySource[];\n\n\n  constructor(town: Town, opts: BiogridOptions) {\n\n    // Batteries\n    // TODO implement this outside when calling the grid\n    const smallBatteryPositions = this.createGridItemPositions(town.getTownSize(), opts.numberOfSmallBatteryCells);\n    const largeBatteryPositions = this.createGridItemPositions(town.getTownSize(), opts.numberOfLargeBatteryCells);\n    // TODO constants\n    this.smallBatteries = this.createBatteries(smallBatteryPositions, SMALL_BATTERY.DEFAULT_START_ENERGY, SMALL_BATTERY.MAX_CAPACITY, GRID_ITEM_NAMES.SMALL_BATTERY);\n    this.largeBatteries = this.createBatteries(largeBatteryPositions, LARGE_BATTERY.DEFAULT_START_ENERGY, LARGE_BATTERY.MAX_CAPACITY, GRID_ITEM_NAMES.LARGE_BATTERY);\n\n    // Towns\n    this.town = town;\n\n    // Enery Source\n    // TODO implement the solar panels\n    const solarPanelPositions = this.createGridItemPositions(town.getTownSize(), opts.numberOfSolarPanels);\n    this.solarPanels = this.createSolarPanels(solarPanelPositions);\n\n    this.state = new BiogridState(this.createGridItems());\n\n  }\n\n  private createGridItems(): GridItem[] {\n    return [\n      ...this.smallBatteries,\n      ...this.largeBatteries,\n      ...this.town.getEnergyUsers(),\n      ...this.solarPanels,\n    ]\n  }\n\n  getSystemState() {\n    return this.state;\n  }\n\n  getJsonGraphDetails() {\n    return this.state.getJsonGraph();\n  }\n\n  private createBatteries(positions: ItemPosition[], initEnergy: Energy, maxCapacity: Energy, name: string): Battery[] {\n    return positions.map((position, index) => new BioBattery(position.x, position.y, `${name}-${index}`, initEnergy, maxCapacity));\n  }\n\n  private createSolarPanels(positions: ItemPosition[]): EnergySource[] {\n    return positions.map((position, index) => new BioEnergySource(position.x, position.y, `${GRID_ITEM_NAMES.SOLAR_PANEL}-${index}`, SOLAR_PANEL.DEFAULT_INITIAL_ENERGY, SOLAR_PANEL.MIN_CAPACITY))\n  }\n\n  takeAction(action: GridAction) {\n    // RETURN a new BiogridState\n    const allSupplyingPaths = action.getSupplyingPaths()\n\n    const clonedGraph = this.state.cloneStateGraph();\n\n    for (const supplyPath in allSupplyingPaths) {\n      const oldGridItem = this.state.getGridItem(supplyPath);\n      const supplyingGridItem = this.state.getGridItem(allSupplyingPaths[supplyPath]);\n      const typeOldGridItem = this.getGridItemType(oldGridItem);\n      if (typeOldGridItem === GRID_ITEM_NAMES.ENERGY_USER) {\n        const energyUser = oldGridItem as Building;\n        const energyUserReq = energyUser.MaxCapacity - energyUser.getEnergyInJoules();\n        const typeSupplyingGridItem = this.getGridItemType(supplyingGridItem);\n        if (typeSupplyingGridItem === GRID_ITEM_NAMES.LARGE_BATTERY || typeSupplyingGridItem === GRID_ITEM_NAMES.SMALL_BATTERY) {\n          const battery = supplyingGridItem as BioBattery;\n          battery.supplyPower(energyUserReq);\n          clonedGraph.setNode(battery.name, battery);\n        } else if (typeSupplyingGridItem === GRID_ITEM_NAMES.SOLAR_PANEL) {\n          const solarpanel = supplyingGridItem as BioEnergySource;\n          solarpanel.supplyPower(energyUserReq);\n          clonedGraph.setNode(solarpanel.name, solarpanel);\n        } else {\n          continue;\n        }\n        energyUser.increaseEnergy(energyUserReq);\n        clonedGraph.setNode(energyUser.name, energyUser);\n      } else if (typeOldGridItem === GRID_ITEM_NAMES.SMALL_BATTERY) {\n        const energyUser = oldGridItem as BioBattery;\n        const energyUserReq = energyUser.MaxCapacity - energyUser.getEnergyInJoules();\n        const typeSupplyingGridItem = this.getGridItemType(supplyingGridItem);\n        if (typeSupplyingGridItem === GRID_ITEM_NAMES.LARGE_BATTERY) {\n          const battery = supplyingGridItem as BioBattery;\n          battery.supplyPower(energyUserReq);\n          clonedGraph.setNode(battery.name, battery);\n        } else if (typeSupplyingGridItem === GRID_ITEM_NAMES.SOLAR_PANEL) {\n          const solarpanel = supplyingGridItem as BioEnergySource;\n          solarpanel.supplyPower(energyUserReq);\n          clonedGraph.setNode(solarpanel.name, solarpanel);\n        } else {\n          continue;\n        }\n        energyUser.startCharging(energyUserReq);\n        clonedGraph.setNode(energyUser.name, energyUser);\n      } else if (typeOldGridItem === GRID_ITEM_NAMES.LARGE_BATTERY) {\n        const energyUser = oldGridItem as BioBattery;\n        const energyUserReq =\n          energyUser.MaxCapacity - energyUser.getEnergyInJoules();\n        const typeSupplyingGridItem = this.getGridItemType(supplyingGridItem);\n        if (typeSupplyingGridItem === GRID_ITEM_NAMES.SOLAR_PANEL) {\n          const solarpanel = supplyingGridItem as BioEnergySource;\n          solarpanel.supplyPower(energyUserReq);\n        } else {\n          continue;\n        }\n        energyUser.startCharging(energyUserReq);\n        clonedGraph.setNode(energyUser.name, energyUser);\n      }\n    }\n    this.state.setnewStateGraph(clonedGraph);\n    return this.state;\n  }\n\n  private getGridItemType(gridItem: GridItem): string {\n    if (gridItem.name.includes(GRID_ITEM_NAMES.ENERGY_USER)) {\n      return GRID_ITEM_NAMES.ENERGY_USER;\n    } else if (gridItem.name.includes(GRID_ITEM_NAMES.SMALL_BATTERY)) {\n      return GRID_ITEM_NAMES.SMALL_BATTERY;\n    } else if (gridItem.name.includes(GRID_ITEM_NAMES.LARGE_BATTERY)) {\n      return GRID_ITEM_NAMES.LARGE_BATTERY;\n    } else if (gridItem.name.includes(GRID_ITEM_NAMES.SOLAR_PANEL)) {\n      return GRID_ITEM_NAMES.SOLAR_PANEL;\n    }\n    return GRID_ITEM_NAMES.GRID;\n  }\n\n  /**\n   * A simplified algorithm to (mostly) evenly space out batteries throughout the square town\n   * Split the town into rows and columns and then place a battery in the center of each cell\n   * TODO: have a smart algorithm for placement, see https://github.com/googleinterns/step141-2020/issues/42\n   */\n  private createGridItemPositions(\n    townSize: TownSize,\n    numberOfGridItems: number\n  ): ItemPosition[] {\n    const cols = Math.ceil(numberOfGridItems / townSize.width);\n    const rows = Math.ceil(numberOfGridItems / cols);\n    const positions: ItemPosition[] = [];\n    for (let i = 0; i < numberOfGridItems; i++) {\n      positions.push({\n        x: (((i % cols) + 0.5) / cols) * townSize.width,\n        y: ((Math.floor(i / cols) + 0.5) / rows) * townSize.height,\n      });\n    }\n    return positions;\n  }\n}\n","import * as graphlib from 'graphlib';\nimport {\n  StateGraphVertex,\n  StateGraph,\n  StateGraphEdge,\n  Distance,\n  ItemPosition,\n  GridItem,\n} from '@biogrid/grid-simulator';\nimport { GRID_ITEM_NAMES } from '../config';\n\nexport class BiogridState implements StateGraph {\n  private graph: graphlib.Graph;\n\n  // TODO think about implement it StateGraphVertex[] as an object of key: name -> value: StateGraphVertex\n  constructor(vertices: StateGraphVertex[]) {\n    // Directed so as to have two edges between A and B, but in opposite directions\n    this.graph = new graphlib.Graph({ directed: true });\n\n    // Initialize the graph with a grid which is a gridItem and has position (0, 0) to keep track of where the items are placed on the map\n    const grid: GridItem = {\n      name: GRID_ITEM_NAMES.GRID,\n      getRelativePosition() {\n        return { x: 0, y: 0 };\n      },\n    };\n    this.graph.setNode(grid.name, grid as GridItem);\n\n    // Add all the vertices as nodes/vertices of the graph, with a name for\n    // the particular grid item and label which is data for the particular vertex as the GridItem itself\n    vertices.map((vertex) =>\n      this.graph.setNode(vertex.name, vertex as GridItem)\n    );\n\n    // Add all the edges that can be formed into the graph, read the add method for how it is done\n    vertices.map((vertex) => this.addEdge(vertex));\n  }\n\n  /**\n   * Method to return the graph for the states of the grid\n   */\n  public getGraph() {\n    return this.graph;\n  }\n\n  /**\n   * cloneStateGraph is used to clone the graph for use in the brain.\n   */\n  public cloneStateGraph(): graphlib.Graph {\n    return graphlib.json.read(graphlib.json.write(this.graph));\n  }\n\n  /**\n   * getJsonGraph returns the json details of the graph\n   */\n  public getJsonGraph() {\n    return graphlib.json.write(this.graph);\n  }\n\n  /**\n   * setnewStateGraph\n   */\n  public setnewStateGraph(newGraph: graphlib.Graph) {\n    this.graph = newGraph;\n  }\n\n  /**\n   * Method finds all the vertices in the graph and returns tehir names\n   * @returns the names of the vertices / gridItems in the grid\n   */\n  public getAllVertices(): string[] {\n    return this.graph.nodes();\n  }\n\n  /**\n   * Method searches the graph for a specific node by its name\n   * @param name is the string that represents the GridItem you are searching for\n   */\n  public getGridItem(name: string): GridItem {\n    return this.graph.node(name);\n  }\n\n  /**\n   * getAllGridItems searches the graph vertices and retrives the gridItems which are stored on the vertices\n   */\n  public getAllGridItems(): GridItem[] {\n    return this.getAllVertices().map((vertexName) =>\n      this.getGridItem(vertexName)\n    );\n  }\n\n  /**\n   * Method returns the shortest distance from every edge to the all the other edges\n   * @returns the shortest distance from any edge to the other edges\n   */\n  public getShortestDistances(): {\n    [source: string]: { [node: string]: graphlib.Path };\n  } {\n    return graphlib.alg.dijkstraAll(\n      this.graph,\n      this.getWeightbyGraph(this.graph)\n    );\n  }\n\n  private getWeightbyGraph(graph: graphlib.Graph) {\n    return function (edge: graphlib.Edge): Distance {\n      return graph.edge(edge);\n    };\n  }\n\n  /**\n   * When given a specific edge, return the weight or distance between the two vertices\n   * @param edge is the Edge of the graph which you would like to get\n   * @returns the weight or the distance between the vertices of @param edge\n   */\n  public getWeightEdge(edge: graphlib.Edge): Distance {\n    return this.graph.edge(edge);\n  }\n\n  /**\n   * Get all GridItem positions in the graph\n   */\n  public getAllPositions(): ItemPosition[] {\n    return (this.graph.nodes() as string[]).map((vertex) =>\n      this.getGridItem(vertex).getRelativePosition()\n    );\n  }\n\n  /**\n   * Add Edge when there is supposed to be an edge\n   * Add edges from the grid, to the every other part of the grid except solar panels\n   * Add reverse edges from the batteries to the grid\n   * Add edge from solar panels to the grid, not the reverse\n   *                                     FROM GRID----->building<----------------------------------->building<---FROM GRID\n   *                                                     ^--|                                   |------^\n   *                                                        |----------S.SMALL_BATTERY----------|\n   *                                                                               ^-----|\n   *                  L.LARGE_BATTERY<------------------------------------>GRID<---------|\n   *                                                FROM SOLAR PANEL^-------| |---^FROM SOLAR PANEL\n   *                                                  SOLAR_PANEL---------->| |<--------------SOLAR_PANEL\n   * @param newVertex is the new item of the Grid to add to @param this.graph as displayed above\n   */\n  private addEdge(newVertex: GridItem) {\n    const newVertexName = newVertex.name;\n    for (const vertex of this.graph.nodes()) {\n      const distance = this.calculateDistance(\n        newVertex,\n        this.graph.node(vertex) as StateGraphVertex\n      );\n      let edge: StateGraphEdge;\n      // Solar panels to the grid only\n      // searching for includes GRID so that when scaling it is easy to add multiple grids\n      if (\n        newVertexName.includes(GRID_ITEM_NAMES.SOLAR_PANEL) &&\n        vertex.includes(GRID_ITEM_NAMES.GRID) &&\n        vertex !== newVertexName\n      ) {\n        edge = { v: newVertexName, w: vertex, weight: distance };\n      } else if (\n        newVertexName.includes(GRID_ITEM_NAMES.LARGE_BATTERY) &&\n        vertex.includes(GRID_ITEM_NAMES.GRID) &&\n        vertex !== newVertexName\n      ) {\n        edge = { v: newVertexName, w: vertex, weight: distance };\n        // Add the opposite edge from grid to battery\n        this.graph.setEdge(vertex, newVertexName, distance);\n      } else if (\n        newVertexName.includes(GRID_ITEM_NAMES.SMALL_BATTERY) &&\n        vertex !== newVertexName\n      ) {\n        if (vertex.includes(GRID_ITEM_NAMES.GRID)) {\n          edge = { v: newVertexName, w: vertex, weight: distance };\n          // Add the opposite edge from grid to battery\n          this.graph.setEdge(vertex, newVertexName, distance);\n        } else if (vertex.includes(GRID_ITEM_NAMES.ENERGY_USER)) {\n          edge = { v: newVertexName, w: vertex, weight: distance };\n        } else {\n          continue;\n        }\n      } else if (\n        newVertexName.includes(GRID_ITEM_NAMES.ENERGY_USER) &&\n        vertex !== newVertexName\n      ) {\n        if (\n          vertex.includes(GRID_ITEM_NAMES.GRID) ||\n          vertex.includes(GRID_ITEM_NAMES.SMALL_BATTERY)\n        ) {\n          edge = { v: vertex, w: newVertexName, weight: distance };\n        } else if (vertex.includes(GRID_ITEM_NAMES.ENERGY_USER)) {\n          edge = { v: newVertexName, w: vertex, weight: distance };\n          // Add the reverse edge from the new energy user/ building to the other building\n          this.graph.setEdge(vertex, newVertexName, distance);\n        } else {\n          continue;\n        }\n      } else {\n        // Do not connect the parts of the grid which don't have to be connected\n        continue;\n      }\n      this.graph.setEdge(edge.v, edge.w, edge.weight);\n    }\n  }\n\n  /**\n   * Calculate distance via Pythagorean's theorem\n   */\n  private calculateDistance(v1: StateGraphVertex, v2: StateGraphVertex) {\n    return Math.sqrt(\n      Math.pow(v1.getRelativePosition().x - v2.getRelativePosition().x, 2) +\n        Math.pow(v1.getRelativePosition().y - v2.getRelativePosition().y, 2)\n    );\n  }\n}\n","export * from './biogrid-action-class'\n","import { GridAction, SupplyingPath } from '@biogrid/grid-simulator';\n\nexport class BiogridAction implements GridAction {\n  private supplyPath: SupplyingPath;\n  constructor(supplyPath: SupplyingPath) {\n    this.supplyPath = supplyPath;\n  }\n  public getSupplyingPaths() {\n    return this.supplyPath;\n  }\n}\n","export * from './building'\n","import {\n  EnergyUser,\n  Battery,\n  ItemPosition,\n  Distance,\n  Energy,\n} from '@biogrid/grid-simulator';\nimport { GRID_ITEM_NAMES, BUILDING } from '../config';\n\n// TODO rename energy to power consumption\n/**\n * A structure such as a building or house which uses energy to operate.\n */\nexport class Building implements EnergyUser {\n  private energyInJoules: number;\n  // Initial id value, will be changed by rural area.\n  private buildingId = -1;\n  // Label to be used in the graph\n  name: string;\n  // /** The battery storage for the building. */\n  // battery: Battery;\n  private relativePosition: ItemPosition;\n\n  /**\n   * @param {number} energy Amount of energy the building will have in joules.\n   */\n  constructor(energy: number, x: Distance, y: Distance,\n      name: string = GRID_ITEM_NAMES.ENERGY_USER,\n      private readonly minCapacity: Energy = BUILDING.MIN_CAPACITY,\n      private readonly maxCapacity:Energy = BUILDING.MAX_CAPACITY,\n  ) {\n    this.relativePosition = { x, y };\n    this.name = name;\n    if (this.isPositive(energy)) {\n      this.energyInJoules = energy;\n    } else {\n      throw new Error(\"Can't create a building with negative energy!\");\n    }\n  }\n\n  get MinCapacity(): Energy {\n    return this.minCapacity;\n  }\n\n  get MaxCapacity(): Energy {\n    return this.maxCapacity;\n  }\n\n  getRelativePosition(): ItemPosition {\n    return this.relativePosition;\n  }\n\n  private isPositive(energy: number): boolean {\n    return energy >= 0;\n  }\n\n  getBuildingId(): number {\n    return this.buildingId;\n  }\n\n  setBuildingId(Id: number) {\n    this.buildingId = Id;\n  }\n\n  getEnergyInJoules(): number {\n    return this.energyInJoules;\n  }\n\n  /**\n   * This method adds energy to the current building's power.\n   */\n  increaseEnergy(energy: number) {\n    if (this.isPositive(energy)) {\n      this.energyInJoules += energy;\n    } else {\n      throw new Error(\"Can't add negative energy!\");\n    }\n  }\n\n  /**\n   * This method uses energy from the current building's power.\n   */\n  decreaseEnergy(energy: number) {\n    if (!this.isPositive(energy)) {\n      throw new Error(\"Can't use a negative amount of energy!\");\n    }\n    // Building can't have a negative amount of energy in store.\n    if (energy >= this.energyInJoules) {\n      this.energyInJoules = 0;\n    } else {\n      this.energyInJoules -= energy;\n    }\n  }\n}\n","export * from './ruralarea'\n","import { Town, TownSize, Distance } from '@biogrid/grid-simulator';\nimport { Building } from '../building';\n\n/**\n * A rural area that represents a community where a microgrid can function.\n */\nexport class RuralArea implements Town {\n  private buildings: Building[] = [];\n  private townSize: TownSize;\n\n  /**\n   * @param {Building[]} buildings A list of buildings which make up a town.\n   */\n  constructor(\n    buildings: Building[],\n    townWidth: Distance,\n    townHeight: Distance\n  ) {\n    this.townSize = { width: townWidth, height: townHeight };\n    for (let i = 0; i < buildings.length; i++) {\n      this.addEnergyUser(buildings[i]);\n    }\n  }\n\n  getEnergyUsers(): Building[] {\n    return this.buildings;\n  }\n\n  getTownSize() {\n    return this.townSize;\n  }\n\n  /**\n   * This method gets a building in a town by its id number.\n   * @param {number} Id The building Id we're looking for.\n   * @return {Building} Returns the building if found in the list, null if not.\n   */\n  getBuildingById(Id: number) {\n    for (let i = 0; i < this.buildings.length; i++) {\n      if (this.buildings[i].getBuildingId() === Id) {\n        return this.buildings[i];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * This method adds a building to our town and assigns it a random Id.\n   * @param {Building} newBuilding The building to be added.\n   */\n  addEnergyUser(newBuilding: Building): Building {\n    const pos = newBuilding.getRelativePosition();\n    if (pos.x > this.townSize.width || pos.y > this.townSize.height) {\n      throw new Error(\n        \"Building relativePosition must be within the town's size constraints\"\n      );\n    }\n    const randomIds = this.buildings.map((building) =>\n      building.getBuildingId()\n    );\n    let randomId = Math.floor(Math.random() * 1000);\n    while (randomIds.includes(randomId)) {\n      randomId = Math.floor(Math.random() * 1000);\n    }\n    newBuilding.setBuildingId(randomId);\n    this.buildings.push(newBuilding);\n    return newBuilding;\n  }\n}\n","export * from './BiogridController';\n"],"sourceRoot":""}